//
//  ColorPickerStyleKit.swift
//  FidgetSpinner
//
//  Created by KTJW on 5/30/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ColorPickerStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let color0: UIColor = UIColor(red: 0.502, green: 0.251, blue: 0.000, alpha: 1.000)
        static let color1: UIColor = UIColor(red: 0.996, green: 0.000, blue: 0.000, alpha: 1.000)
        static let color2: UIColor = UIColor(red: 0.996, green: 0.416, blue: 0.000, alpha: 1.000)
        static let color3: UIColor = UIColor(red: 1.000, green: 0.847, blue: 0.000, alpha: 1.000)
        static let color4: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.004, alpha: 1.000)
        static let color5: UIColor = UIColor(red: 0.329, green: 0.329, blue: 0.329, alpha: 1.000)
        static let color6: UIColor = UIColor(red: 0.251, green: 0.122, blue: 0.000, alpha: 1.000)
        static let color7: UIColor = UIColor(red: 0.502, green: 0.000, blue: 0.004, alpha: 1.000)
        static let color8: UIColor = UIColor(red: 0.502, green: 0.208, blue: 0.000, alpha: 1.000)
        static let color9: UIColor = UIColor(red: 0.502, green: 0.420, blue: 0.000, alpha: 1.000)
        static let color10: UIColor = UIColor(red: 0.004, green: 0.498, blue: 0.004, alpha: 1.000)
        static let color11: UIColor = UIColor(red: 0.659, green: 0.659, blue: 0.659, alpha: 1.000)
        static let color12: UIColor = UIColor(red: 0.004, green: 1.000, blue: 1.000, alpha: 1.000)
        static let color13: UIColor = UIColor(red: 0.000, green: 0.580, blue: 0.996, alpha: 1.000)
        static let color14: UIColor = UIColor(red: 0.000, green: 0.149, blue: 1.000, alpha: 1.000)
        static let color15: UIColor = UIColor(red: 0.694, green: 0.000, blue: 0.996, alpha: 1.000)
        static let color16: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.431, alpha: 1.000)
        static let color17: UIColor = UIColor(red: 0.004, green: 0.498, blue: 0.494, alpha: 1.000)
        static let color18: UIColor = UIColor(red: 0.000, green: 0.286, blue: 0.494, alpha: 1.000)
        static let color19: UIColor = UIColor(red: 0.000, green: 0.071, blue: 0.502, alpha: 1.000)
        static let color20: UIColor = UIColor(red: 0.349, green: 0.000, blue: 0.502, alpha: 1.000)
        static let color21: UIColor = UIColor(red: 0.498, green: 0.000, blue: 0.216, alpha: 1.000)
    }

    //// Colors

    public dynamic class var color: UIColor { return Cache.color }
    public dynamic class var color0: UIColor { return Cache.color0 }
    public dynamic class var color1: UIColor { return Cache.color1 }
    public dynamic class var color2: UIColor { return Cache.color2 }
    public dynamic class var color3: UIColor { return Cache.color3 }
    public dynamic class var color4: UIColor { return Cache.color4 }
    public dynamic class var color5: UIColor { return Cache.color5 }
    public dynamic class var color6: UIColor { return Cache.color6 }
    public dynamic class var color7: UIColor { return Cache.color7 }
    public dynamic class var color8: UIColor { return Cache.color8 }
    public dynamic class var color9: UIColor { return Cache.color9 }
    public dynamic class var color10: UIColor { return Cache.color10 }
    public dynamic class var color11: UIColor { return Cache.color11 }
    public dynamic class var color12: UIColor { return Cache.color12 }
    public dynamic class var color13: UIColor { return Cache.color13 }
    public dynamic class var color14: UIColor { return Cache.color14 }
    public dynamic class var color15: UIColor { return Cache.color15 }
    public dynamic class var color16: UIColor { return Cache.color16 }
    public dynamic class var color17: UIColor { return Cache.color17 }
    public dynamic class var color18: UIColor { return Cache.color18 }
    public dynamic class var color19: UIColor { return Cache.color19 }
    public dynamic class var color20: UIColor { return Cache.color20 }
    public dynamic class var color21: UIColor { return Cache.color21 }

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 797, height: 468), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 797, height: 468), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 797, y: resizedFrame.height / 468)



        //// Image Declarations
        let lJnAe = UIImage(named: "lJnAe.jpg")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 82, y: 0, width: 600, height: 395))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(lJnAe.cgImage!, in: CGRect(x: 82, y: 0, width: lJnAe.size.width, height: lJnAe.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawColors(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 2819, height: 287), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 2819, height: 287), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 2819, y: resizedFrame.height / 287)


        //// Group


        //// colorPicker
        //// Group 3
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 77, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 189, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color0.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 301, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color1.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 411, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color2.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 523, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color3.setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 635, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color4.setFill()
        oval6Path.fill()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 745.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color5.setFill()
        oval7Path.fill()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 857.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color6.setFill()
        oval8Path.fill()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 969.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color7.setFill()
        oval9Path.fill()


        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 1081.5, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color8.setFill()
        oval10Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 1193.5, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color9.setFill()
        oval11Path.fill()


        //// Oval 12 Drawing
        let oval12Path = UIBezierPath(ovalIn: CGRect(x: 1303.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color10.setFill()
        oval12Path.fill()


        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 1416, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color11.setFill()
        oval13Path.fill()


        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 1527, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color12.setFill()
        oval14Path.fill()


        //// Oval 15 Drawing
        let oval15Path = UIBezierPath(ovalIn: CGRect(x: 1639, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color13.setFill()
        oval15Path.fill()


        //// Oval 16 Drawing
        let oval16Path = UIBezierPath(ovalIn: CGRect(x: 1750, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color14.setFill()
        oval16Path.fill()


        //// Oval 17 Drawing
        let oval17Path = UIBezierPath(ovalIn: CGRect(x: 1862, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color15.setFill()
        oval17Path.fill()


        //// Oval 18 Drawing
        let oval18Path = UIBezierPath(ovalIn: CGRect(x: 1974, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color16.setFill()
        oval18Path.fill()


        //// Oval 19 Drawing
        let oval19Path = UIBezierPath(ovalIn: CGRect(x: 2085.5, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color17.setFill()
        oval19Path.fill()


        //// Oval 20 Drawing
        let oval20Path = UIBezierPath(ovalIn: CGRect(x: 2196.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color18.setFill()
        oval20Path.fill()


        //// Oval 21 Drawing
        let oval21Path = UIBezierPath(ovalIn: CGRect(x: 2308.5, y: 76, width: 103, height: 103))
        ColorPickerStyleKit.color19.setFill()
        oval21Path.fill()


        //// Oval 22 Drawing
        let oval22Path = UIBezierPath(ovalIn: CGRect(x: 2419.5, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color20.setFill()
        oval22Path.fill()


        //// Oval 23 Drawing
        let oval23Path = UIBezierPath(ovalIn: CGRect(x: 2531.5, y: 76, width: 102, height: 103))
        ColorPickerStyleKit.color21.setFill()
        oval23Path.fill()


        //// Oval 24 Drawing
        let oval24Path = UIBezierPath(ovalIn: CGRect(x: 2642.5, y: 76, width: 103, height: 103))
        UIColor.gray.setFill()
        oval24Path.fill()
        
        context.restoreGState()

    }




    @objc(ColorPickerStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
