//
//  BearingStyleStyleKit.swift
//  Fidget Spinner
//
//  Created by KTJW on 5/31/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class BearingStyleStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawBearing2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, bearingColorParam: UIColor = UIColor(red: 0.623, green: 0.623, blue: 0.623, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let silverMetalMiddles = UIColor(red: 0.458, green: 0.458, blue: 0.458, alpha: 1.000)
        let color = UIColor(red: 0.760, green: 0.760, blue: 0.760, alpha: 1.000)
        let innerShellShineColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let bearingMiddleShadow = NSShadow()
        bearingMiddleShadow.shadowColor = UIColor.black
        bearingMiddleShadow.shadowOffset = CGSize(width: 0, height: 0)
        bearingMiddleShadow.shadowBlurRadius = 11
        let outerRimShadow = NSShadow()
        outerRimShadow.shadowColor = UIColor.black
        outerRimShadow.shadowOffset = CGSize(width: 0, height: 0)
        outerRimShadow.shadowBlurRadius = 4
        let innerShellShine = NSShadow()
        innerShellShine.shadowColor = innerShellShineColor
        innerShellShine.shadowOffset = CGSize(width: 0, height: 1)
        innerShellShine.shadowBlurRadius = 3

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72.68))
        bezierPath.addCurve(to: CGPoint(x: -72.57, y: 0.25), controlPoint1: CGPoint(x: -39.85, y: -72.68), controlPoint2: CGPoint(x: -72.57, y: -40.03))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73.18), controlPoint1: CGPoint(x: -72.57, y: 40.53), controlPoint2: CGPoint(x: -39.85, y: 73.18))
        bezierPath.addCurve(to: CGPoint(x: 73.58, y: 0.25), controlPoint1: CGPoint(x: 40.86, y: 73.18), controlPoint2: CGPoint(x: 73.58, y: 40.53))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72.68), controlPoint1: CGPoint(x: 73.58, y: -40.03), controlPoint2: CGPoint(x: 40.86, y: -72.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 127, y: 0))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        bezierPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        bezierPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        bezierPath.close()
        bearingColorParam.setFill()
        bezierPath.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.move(to: CGPoint(x: 125, y: 0))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 125), controlPoint1: CGPoint(x: 125, y: 69.03), controlPoint2: CGPoint(x: 69.04, y: 125))
        oval4Path.addCurve(to: CGPoint(x: -125, y: -0), controlPoint1: CGPoint(x: -69.04, y: 125), controlPoint2: CGPoint(x: -125, y: 69.03))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -125), controlPoint1: CGPoint(x: -125, y: -69.03), controlPoint2: CGPoint(x: -69.04, y: -125))
        oval4Path.addCurve(to: CGPoint(x: 125, y: 0), controlPoint1: CGPoint(x: 69.04, y: -125), controlPoint2: CGPoint(x: 125, y: -69.03))
        oval4Path.addLine(to: CGPoint(x: 106.62, y: 0))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -106.65), controlPoint1: CGPoint(x: 106.62, y: -58.91), controlPoint2: CGPoint(x: 58.88, y: -106.65))
        oval4Path.addCurve(to: CGPoint(x: -106.62, y: -0), controlPoint1: CGPoint(x: -58.88, y: -106.65), controlPoint2: CGPoint(x: -106.62, y: -58.91))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 106.65), controlPoint1: CGPoint(x: -106.62, y: 58.91), controlPoint2: CGPoint(x: -58.88, y: 106.65))
        oval4Path.addCurve(to: CGPoint(x: 106.62, y: 0), controlPoint1: CGPoint(x: 58.88, y: 106.65), controlPoint2: CGPoint(x: 106.62, y: 58.91))
        oval4Path.addLine(to: CGPoint(x: 125, y: 0))
        oval4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: outerRimShadow.shadowOffset.width * resizedShadowScale, height: outerRimShadow.shadowOffset.height * resizedShadowScale), blur: outerRimShadow.shadowBlurRadius * resizedShadowScale, color: (outerRimShadow.shadowColor as! UIColor).cgColor)
        color.setFill()
        oval4Path.fill()
        context.restoreGState()



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        darkMetal.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 71, y: 0))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 71), controlPoint1: CGPoint(x: 71, y: 39.21), controlPoint2: CGPoint(x: 39.21, y: 71))
        oval2Path.addCurve(to: CGPoint(x: -71, y: -0), controlPoint1: CGPoint(x: -39.21, y: 71), controlPoint2: CGPoint(x: -71, y: 39.21))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -71), controlPoint1: CGPoint(x: -71, y: -39.21), controlPoint2: CGPoint(x: -39.21, y: -71))
        oval2Path.addCurve(to: CGPoint(x: 71, y: 0), controlPoint1: CGPoint(x: 39.21, y: -71), controlPoint2: CGPoint(x: 71, y: -39.21))
        oval2Path.addLine(to: CGPoint(x: 53.25, y: 0))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -53.25), controlPoint1: CGPoint(x: 53.25, y: -29.41), controlPoint2: CGPoint(x: 29.41, y: -53.25))
        oval2Path.addCurve(to: CGPoint(x: -53.25, y: -0), controlPoint1: CGPoint(x: -29.41, y: -53.25), controlPoint2: CGPoint(x: -53.25, y: -29.41))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 53.25), controlPoint1: CGPoint(x: -53.25, y: 29.41), controlPoint2: CGPoint(x: -29.41, y: 53.25))
        oval2Path.addCurve(to: CGPoint(x: 53.25, y: 0), controlPoint1: CGPoint(x: 29.41, y: 53.25), controlPoint2: CGPoint(x: 53.25, y: 29.41))
        oval2Path.addLine(to: CGPoint(x: 71, y: 0))
        oval2Path.close()
        darkMetal.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 84, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 85), controlPoint1: CGPoint(x: 84, y: 47.17), controlPoint2: CGPoint(x: 46.17, y: 85))
        oval3Path.addCurve(to: CGPoint(x: -85, y: 0.5), controlPoint1: CGPoint(x: -47.17, y: 85), controlPoint2: CGPoint(x: -85, y: 47.17))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -84), controlPoint1: CGPoint(x: -85, y: -46.17), controlPoint2: CGPoint(x: -47.17, y: -84))
        oval3Path.addCurve(to: CGPoint(x: 84, y: 0.5), controlPoint1: CGPoint(x: 46.17, y: -84), controlPoint2: CGPoint(x: 84, y: -46.17))
        oval3Path.addLine(to: CGPoint(x: 62.88, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -62.88), controlPoint1: CGPoint(x: 62.88, y: -34.5), controlPoint2: CGPoint(x: 34.5, y: -62.87))
        oval3Path.addCurve(to: CGPoint(x: -63.88, y: 0.5), controlPoint1: CGPoint(x: -35.5, y: -62.88), controlPoint2: CGPoint(x: -63.87, y: -34.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 63.88), controlPoint1: CGPoint(x: -63.88, y: 35.5), controlPoint2: CGPoint(x: -35.5, y: 63.88))
        oval3Path.addCurve(to: CGPoint(x: 62.88, y: 0.5), controlPoint1: CGPoint(x: 34.5, y: 63.88), controlPoint2: CGPoint(x: 62.88, y: 35.5))
        oval3Path.addLine(to: CGPoint(x: 84, y: 0.5))
        oval3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: bearingMiddleShadow.shadowOffset.width * resizedShadowScale, height: bearingMiddleShadow.shadowOffset.height * resizedShadowScale), blur: bearingMiddleShadow.shadowBlurRadius * resizedShadowScale, color: (bearingMiddleShadow.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        oval3Path.fill()
        context.restoreGState()



        //// Oval 5 Drawing
        let oval5Path = UIBezierPath()
        oval5Path.move(to: CGPoint(x: 80, y: 0))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 80), controlPoint1: CGPoint(x: 80, y: 44.18), controlPoint2: CGPoint(x: 44.18, y: 80))
        oval5Path.addCurve(to: CGPoint(x: -80, y: -0), controlPoint1: CGPoint(x: -44.18, y: 80), controlPoint2: CGPoint(x: -80, y: 44.18))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -80), controlPoint1: CGPoint(x: -80, y: -44.18), controlPoint2: CGPoint(x: -44.18, y: -80))
        oval5Path.addCurve(to: CGPoint(x: 80, y: 0), controlPoint1: CGPoint(x: 44.18, y: -80), controlPoint2: CGPoint(x: 80, y: -44.18))
        oval5Path.addLine(to: CGPoint(x: 60, y: 0))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -60), controlPoint1: CGPoint(x: 60, y: -33.14), controlPoint2: CGPoint(x: 33.14, y: -60))
        oval5Path.addCurve(to: CGPoint(x: -60, y: -0), controlPoint1: CGPoint(x: -33.14, y: -60), controlPoint2: CGPoint(x: -60, y: -33.14))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 60), controlPoint1: CGPoint(x: -60, y: 33.14), controlPoint2: CGPoint(x: -33.14, y: 60))
        oval5Path.addCurve(to: CGPoint(x: 60, y: 0), controlPoint1: CGPoint(x: 33.14, y: 60), controlPoint2: CGPoint(x: 60, y: 33.14))
        oval5Path.addLine(to: CGPoint(x: 80, y: 0))
        oval5Path.close()
        silverMetalMiddles.setFill()
        oval5Path.fill()

        ////// Oval 5 Inner Shadow
        context.saveGState()
        context.clip(to: oval5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((innerShellShine.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval5OpaqueShadow = (innerShellShine.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: innerShellShine.shadowOffset.width * resizedShadowScale, height: innerShellShine.shadowOffset.height * resizedShadowScale), blur: innerShellShine.shadowBlurRadius * resizedShadowScale, color: oval5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval5OpaqueShadow.setFill()
        oval5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBearing3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let silverMetalMiddles = UIColor(red: 0.458, green: 0.458, blue: 0.458, alpha: 1.000)
        let color = UIColor(red: 0.760, green: 0.760, blue: 0.760, alpha: 1.000)
        let innerShellShineColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let goldCeramic = UIColor(red: 0.959, green: 0.842, blue: 0.390, alpha: 1.000)

        //// Shadow Declarations
        let bearingMiddleShadow = NSShadow()
        bearingMiddleShadow.shadowColor = UIColor.black
        bearingMiddleShadow.shadowOffset = CGSize(width: 0, height: 0)
        bearingMiddleShadow.shadowBlurRadius = 11
        let outerRimShadow = NSShadow()
        outerRimShadow.shadowColor = UIColor.black
        outerRimShadow.shadowOffset = CGSize(width: 0, height: 0)
        outerRimShadow.shadowBlurRadius = 4
        let innerShellShine = NSShadow()
        innerShellShine.shadowColor = innerShellShineColor
        innerShellShine.shadowOffset = CGSize(width: 0, height: 1)
        innerShellShine.shadowBlurRadius = 3

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72))
        bezierPath.addCurve(to: CGPoint(x: -72, y: 0.5), controlPoint1: CGPoint(x: -39.54, y: -72), controlPoint2: CGPoint(x: -72, y: -39.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73), controlPoint1: CGPoint(x: -72, y: 40.54), controlPoint2: CGPoint(x: -39.54, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 73, y: 0.5), controlPoint1: CGPoint(x: 40.54, y: 73), controlPoint2: CGPoint(x: 73, y: 40.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72), controlPoint1: CGPoint(x: 73, y: -39.54), controlPoint2: CGPoint(x: 40.54, y: -72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 126, y: 0.25))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 126.5), controlPoint1: CGPoint(x: 126, y: 69.98), controlPoint2: CGPoint(x: 69.59, y: 126.5))
        bezierPath.addCurve(to: CGPoint(x: -126, y: 0.25), controlPoint1: CGPoint(x: -69.59, y: 126.5), controlPoint2: CGPoint(x: -126, y: 69.98))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -126), controlPoint1: CGPoint(x: -126, y: -69.48), controlPoint2: CGPoint(x: -69.59, y: -126))
        bezierPath.addCurve(to: CGPoint(x: 126, y: 0.25), controlPoint1: CGPoint(x: 69.59, y: -126), controlPoint2: CGPoint(x: 126, y: -69.48))
        bezierPath.close()
        goldCeramic.setFill()
        bezierPath.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.move(to: CGPoint(x: 125, y: 0))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 125), controlPoint1: CGPoint(x: 125, y: 69.03), controlPoint2: CGPoint(x: 69.04, y: 125))
        oval4Path.addCurve(to: CGPoint(x: -125, y: -0), controlPoint1: CGPoint(x: -69.04, y: 125), controlPoint2: CGPoint(x: -125, y: 69.03))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -125), controlPoint1: CGPoint(x: -125, y: -69.03), controlPoint2: CGPoint(x: -69.04, y: -125))
        oval4Path.addCurve(to: CGPoint(x: 125, y: 0), controlPoint1: CGPoint(x: 69.04, y: -125), controlPoint2: CGPoint(x: 125, y: -69.03))
        oval4Path.addLine(to: CGPoint(x: 106.62, y: 0))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -106.65), controlPoint1: CGPoint(x: 106.62, y: -58.91), controlPoint2: CGPoint(x: 58.88, y: -106.65))
        oval4Path.addCurve(to: CGPoint(x: -106.62, y: -0), controlPoint1: CGPoint(x: -58.88, y: -106.65), controlPoint2: CGPoint(x: -106.62, y: -58.91))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 106.65), controlPoint1: CGPoint(x: -106.62, y: 58.91), controlPoint2: CGPoint(x: -58.88, y: 106.65))
        oval4Path.addCurve(to: CGPoint(x: 106.62, y: 0), controlPoint1: CGPoint(x: 58.88, y: 106.65), controlPoint2: CGPoint(x: 106.62, y: 58.91))
        oval4Path.addLine(to: CGPoint(x: 125, y: 0))
        oval4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: outerRimShadow.shadowOffset.width * resizedShadowScale, height: outerRimShadow.shadowOffset.height * resizedShadowScale), blur: outerRimShadow.shadowBlurRadius * resizedShadowScale, color: (outerRimShadow.shadowColor as! UIColor).cgColor)
        color.setFill()
        oval4Path.fill()
        context.restoreGState()



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        darkMetal.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 71, y: 0))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 71), controlPoint1: CGPoint(x: 71, y: 39.21), controlPoint2: CGPoint(x: 39.21, y: 71))
        oval2Path.addCurve(to: CGPoint(x: -71, y: -0), controlPoint1: CGPoint(x: -39.21, y: 71), controlPoint2: CGPoint(x: -71, y: 39.21))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -71), controlPoint1: CGPoint(x: -71, y: -39.21), controlPoint2: CGPoint(x: -39.21, y: -71))
        oval2Path.addCurve(to: CGPoint(x: 71, y: 0), controlPoint1: CGPoint(x: 39.21, y: -71), controlPoint2: CGPoint(x: 71, y: -39.21))
        oval2Path.addLine(to: CGPoint(x: 53.25, y: 0))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -53.25), controlPoint1: CGPoint(x: 53.25, y: -29.41), controlPoint2: CGPoint(x: 29.41, y: -53.25))
        oval2Path.addCurve(to: CGPoint(x: -53.25, y: -0), controlPoint1: CGPoint(x: -29.41, y: -53.25), controlPoint2: CGPoint(x: -53.25, y: -29.41))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 53.25), controlPoint1: CGPoint(x: -53.25, y: 29.41), controlPoint2: CGPoint(x: -29.41, y: 53.25))
        oval2Path.addCurve(to: CGPoint(x: 53.25, y: 0), controlPoint1: CGPoint(x: 29.41, y: 53.25), controlPoint2: CGPoint(x: 53.25, y: 29.41))
        oval2Path.addLine(to: CGPoint(x: 71, y: 0))
        oval2Path.close()
        darkMetal.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 84, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 85), controlPoint1: CGPoint(x: 84, y: 47.17), controlPoint2: CGPoint(x: 46.17, y: 85))
        oval3Path.addCurve(to: CGPoint(x: -85, y: 0.5), controlPoint1: CGPoint(x: -47.17, y: 85), controlPoint2: CGPoint(x: -85, y: 47.17))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -84), controlPoint1: CGPoint(x: -85, y: -46.17), controlPoint2: CGPoint(x: -47.17, y: -84))
        oval3Path.addCurve(to: CGPoint(x: 84, y: 0.5), controlPoint1: CGPoint(x: 46.17, y: -84), controlPoint2: CGPoint(x: 84, y: -46.17))
        oval3Path.addLine(to: CGPoint(x: 62.88, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -62.88), controlPoint1: CGPoint(x: 62.88, y: -34.5), controlPoint2: CGPoint(x: 34.5, y: -62.87))
        oval3Path.addCurve(to: CGPoint(x: -63.88, y: 0.5), controlPoint1: CGPoint(x: -35.5, y: -62.88), controlPoint2: CGPoint(x: -63.87, y: -34.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 63.88), controlPoint1: CGPoint(x: -63.88, y: 35.5), controlPoint2: CGPoint(x: -35.5, y: 63.88))
        oval3Path.addCurve(to: CGPoint(x: 62.88, y: 0.5), controlPoint1: CGPoint(x: 34.5, y: 63.88), controlPoint2: CGPoint(x: 62.88, y: 35.5))
        oval3Path.addLine(to: CGPoint(x: 84, y: 0.5))
        oval3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: bearingMiddleShadow.shadowOffset.width * resizedShadowScale, height: bearingMiddleShadow.shadowOffset.height * resizedShadowScale), blur: bearingMiddleShadow.shadowBlurRadius * resizedShadowScale, color: (bearingMiddleShadow.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        oval3Path.fill()
        context.restoreGState()



        //// Oval 5 Drawing
        let oval5Path = UIBezierPath()
        oval5Path.move(to: CGPoint(x: 80, y: 0))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 80), controlPoint1: CGPoint(x: 80, y: 44.18), controlPoint2: CGPoint(x: 44.18, y: 80))
        oval5Path.addCurve(to: CGPoint(x: -80, y: -0), controlPoint1: CGPoint(x: -44.18, y: 80), controlPoint2: CGPoint(x: -80, y: 44.18))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -80), controlPoint1: CGPoint(x: -80, y: -44.18), controlPoint2: CGPoint(x: -44.18, y: -80))
        oval5Path.addCurve(to: CGPoint(x: 80, y: 0), controlPoint1: CGPoint(x: 44.18, y: -80), controlPoint2: CGPoint(x: 80, y: -44.18))
        oval5Path.addLine(to: CGPoint(x: 60, y: 0))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -60), controlPoint1: CGPoint(x: 60, y: -33.14), controlPoint2: CGPoint(x: 33.14, y: -60))
        oval5Path.addCurve(to: CGPoint(x: -60, y: -0), controlPoint1: CGPoint(x: -33.14, y: -60), controlPoint2: CGPoint(x: -60, y: -33.14))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 60), controlPoint1: CGPoint(x: -60, y: 33.14), controlPoint2: CGPoint(x: -33.14, y: 60))
        oval5Path.addCurve(to: CGPoint(x: 60, y: 0), controlPoint1: CGPoint(x: 33.14, y: 60), controlPoint2: CGPoint(x: 60, y: 33.14))
        oval5Path.addLine(to: CGPoint(x: 80, y: 0))
        oval5Path.close()
        silverMetalMiddles.setFill()
        oval5Path.fill()

        ////// Oval 5 Inner Shadow
        context.saveGState()
        context.clip(to: oval5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((innerShellShine.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval5OpaqueShadow = (innerShellShine.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: innerShellShine.shadowOffset.width * resizedShadowScale, height: innerShellShine.shadowOffset.height * resizedShadowScale), blur: innerShellShine.shadowBlurRadius * resizedShadowScale, color: oval5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval5OpaqueShadow.setFill()
        oval5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBearing5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, bearingColorParam: UIColor = UIColor(red: 0.623, green: 0.623, blue: 0.623, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)

        //// Shadow Declarations
        let metalWeightShadow = NSShadow()
        metalWeightShadow.shadowColor = UIColor.black
        metalWeightShadow.shadowOffset = CGSize(width: 0, height: 0)
        metalWeightShadow.shadowBlurRadius = 14

        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: -88, y: -87, width: 175, height: 175))
        bearingColorParam.setFill()
        oval6Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72))
        bezierPath.addCurve(to: CGPoint(x: -72, y: 0.5), controlPoint1: CGPoint(x: -39.54, y: -72), controlPoint2: CGPoint(x: -72, y: -39.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73), controlPoint1: CGPoint(x: -72, y: 40.54), controlPoint2: CGPoint(x: -39.54, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 73, y: 0.5), controlPoint1: CGPoint(x: 40.54, y: 73), controlPoint2: CGPoint(x: 73, y: 40.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72), controlPoint1: CGPoint(x: 73, y: -39.54), controlPoint2: CGPoint(x: 40.54, y: -72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 126, y: 0.25))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 126.5), controlPoint1: CGPoint(x: 126, y: 69.98), controlPoint2: CGPoint(x: 69.59, y: 126.5))
        bezierPath.addCurve(to: CGPoint(x: -126, y: 0.25), controlPoint1: CGPoint(x: -69.59, y: 126.5), controlPoint2: CGPoint(x: -126, y: 69.98))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -126), controlPoint1: CGPoint(x: -126, y: -69.48), controlPoint2: CGPoint(x: -69.59, y: -126))
        bezierPath.addCurve(to: CGPoint(x: 126, y: 0.25), controlPoint1: CGPoint(x: 69.59, y: -126), controlPoint2: CGPoint(x: 126, y: -69.48))
        bezierPath.close()
        bearingColorParam.setFill()
        bezierPath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: metalWeightShadow.shadowOffset.width * resizedShadowScale, height: metalWeightShadow.shadowOffset.height * resizedShadowScale), blur: metalWeightShadow.shadowBlurRadius * resizedShadowScale, color: (metalWeightShadow.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        ovalPath.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBearing1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, bearingColorParam: UIColor = UIColor(red: 0.623, green: 0.623, blue: 0.623, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Symbol Drawing
        let symbolRect = CGRect(x: -127, y: -127, width: 254, height: 254)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        context.translateBy(x: 150, y: 150)

        BearingStyleStyleKit.drawClassicNoCap2(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBearing4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, bearingColorParam: UIColor = UIColor(red: 0.623, green: 0.623, blue: 0.623, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let innerShellShineColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let magnetBlue = UIColor(red: 0.320, green: 0.711, blue: 0.800, alpha: 1.000)

        //// Shadow Declarations
        let outerRimShadow = NSShadow()
        outerRimShadow.shadowColor = UIColor.black
        outerRimShadow.shadowOffset = CGSize(width: 0, height: 0)
        outerRimShadow.shadowBlurRadius = 4
        let innerShellShine = NSShadow()
        innerShellShine.shadowColor = innerShellShineColor
        innerShellShine.shadowOffset = CGSize(width: 0, height: 1)
        innerShellShine.shadowBlurRadius = 3
        let magnet = NSShadow()
        magnet.shadowColor = UIColor.black
        magnet.shadowOffset = CGSize(width: 0, height: 0)
        magnet.shadowBlurRadius = 13

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72.68))
        bezierPath.addCurve(to: CGPoint(x: -72.57, y: 0.25), controlPoint1: CGPoint(x: -39.85, y: -72.68), controlPoint2: CGPoint(x: -72.57, y: -40.03))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73.18), controlPoint1: CGPoint(x: -72.57, y: 40.53), controlPoint2: CGPoint(x: -39.85, y: 73.18))
        bezierPath.addCurve(to: CGPoint(x: 73.58, y: 0.25), controlPoint1: CGPoint(x: 40.86, y: 73.18), controlPoint2: CGPoint(x: 73.58, y: 40.53))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72.68), controlPoint1: CGPoint(x: 73.58, y: -40.03), controlPoint2: CGPoint(x: 40.86, y: -72.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 127, y: 0))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        bezierPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        bezierPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        bezierPath.close()
        magnetBlue.setFill()
        bezierPath.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.move(to: CGPoint(x: 101, y: 0.5))
        oval4Path.addCurve(to: CGPoint(x: -0.5, y: 102), controlPoint1: CGPoint(x: 101, y: 56.55), controlPoint2: CGPoint(x: 55.56, y: 102))
        oval4Path.addCurve(to: CGPoint(x: -102, y: 0.5), controlPoint1: CGPoint(x: -56.56, y: 102), controlPoint2: CGPoint(x: -102, y: 56.55))
        oval4Path.addCurve(to: CGPoint(x: -0.5, y: -101), controlPoint1: CGPoint(x: -102, y: -55.55), controlPoint2: CGPoint(x: -56.56, y: -101))
        oval4Path.addCurve(to: CGPoint(x: 101, y: 0.5), controlPoint1: CGPoint(x: 55.56, y: -101), controlPoint2: CGPoint(x: 101, y: -55.55))
        oval4Path.addLine(to: CGPoint(x: 86.07, y: 0.5))
        oval4Path.addCurve(to: CGPoint(x: -0.5, y: -86.1), controlPoint1: CGPoint(x: 86.07, y: -47.33), controlPoint2: CGPoint(x: 47.31, y: -86.1))
        oval4Path.addCurve(to: CGPoint(x: -87.07, y: 0.5), controlPoint1: CGPoint(x: -48.31, y: -86.1), controlPoint2: CGPoint(x: -87.07, y: -47.33))
        oval4Path.addCurve(to: CGPoint(x: -0.5, y: 87.1), controlPoint1: CGPoint(x: -87.07, y: 48.33), controlPoint2: CGPoint(x: -48.31, y: 87.1))
        oval4Path.addCurve(to: CGPoint(x: 86.07, y: 0.5), controlPoint1: CGPoint(x: 47.31, y: 87.1), controlPoint2: CGPoint(x: 86.07, y: 48.33))
        oval4Path.addLine(to: CGPoint(x: 101, y: 0.5))
        oval4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: outerRimShadow.shadowOffset.width * resizedShadowScale, height: outerRimShadow.shadowOffset.height * resizedShadowScale), blur: outerRimShadow.shadowBlurRadius * resizedShadowScale, color: (outerRimShadow.shadowColor as! UIColor).cgColor)
        bearingColorParam.setFill()
        oval4Path.fill()
        context.restoreGState()



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: magnet.shadowOffset.width * resizedShadowScale, height: magnet.shadowOffset.height * resizedShadowScale), blur: magnet.shadowBlurRadius * resizedShadowScale, color: (magnet.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        ovalPath.fill()
        context.restoreGState()



        //// Oval 5 Drawing
        let oval5Path = UIBezierPath()
        oval5Path.move(to: CGPoint(x: 80, y: 0))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 80), controlPoint1: CGPoint(x: 80, y: 44.18), controlPoint2: CGPoint(x: 44.18, y: 80))
        oval5Path.addCurve(to: CGPoint(x: -80, y: -0), controlPoint1: CGPoint(x: -44.18, y: 80), controlPoint2: CGPoint(x: -80, y: 44.18))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -80), controlPoint1: CGPoint(x: -80, y: -44.18), controlPoint2: CGPoint(x: -44.18, y: -80))
        oval5Path.addCurve(to: CGPoint(x: 80, y: 0), controlPoint1: CGPoint(x: 44.18, y: -80), controlPoint2: CGPoint(x: 80, y: -44.18))
        oval5Path.addLine(to: CGPoint(x: 60, y: 0))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -60), controlPoint1: CGPoint(x: 60, y: -33.14), controlPoint2: CGPoint(x: 33.14, y: -60))
        oval5Path.addCurve(to: CGPoint(x: -60, y: -0), controlPoint1: CGPoint(x: -33.14, y: -60), controlPoint2: CGPoint(x: -60, y: -33.14))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 60), controlPoint1: CGPoint(x: -60, y: 33.14), controlPoint2: CGPoint(x: -33.14, y: 60))
        oval5Path.addCurve(to: CGPoint(x: 60, y: 0), controlPoint1: CGPoint(x: 33.14, y: 60), controlPoint2: CGPoint(x: 60, y: 33.14))
        oval5Path.addLine(to: CGPoint(x: 80, y: 0))
        oval5Path.close()
        darkMetal.setFill()
        oval5Path.fill()

        ////// Oval 5 Inner Shadow
        context.saveGState()
        context.clip(to: oval5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((innerShellShine.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval5OpaqueShadow = (innerShellShine.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: innerShellShine.shadowOffset.width * resizedShadowScale, height: innerShellShine.shadowOffset.height * resizedShadowScale), blur: innerShellShine.shadowBlurRadius * resizedShadowScale, color: oval5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval5OpaqueShadow.setFill()
        oval5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBearing6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)

        //// Shadow Declarations
        let metalWeightShadow = NSShadow()
        metalWeightShadow.shadowColor = UIColor.black
        metalWeightShadow.shadowOffset = CGSize(width: 0, height: 0)
        metalWeightShadow.shadowBlurRadius = 14

        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: metalWeightShadow.shadowOffset.width * resizedShadowScale, height: metalWeightShadow.shadowOffset.height * resizedShadowScale), blur: metalWeightShadow.shadowBlurRadius * resizedShadowScale, color: (metalWeightShadow.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        ovalPath.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)
        
        context.restoreGState()

    }

    public dynamic class func drawCeramicGold(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let silverMetalMiddles = UIColor(red: 0.458, green: 0.458, blue: 0.458, alpha: 1.000)
        let color = UIColor(red: 0.760, green: 0.760, blue: 0.760, alpha: 1.000)
        let innerShellShineColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let goldCeramic = UIColor(red: 0.959, green: 0.842, blue: 0.390, alpha: 1.000)

        //// Shadow Declarations
        let bearingMiddleShadow = NSShadow()
        bearingMiddleShadow.shadowColor = UIColor.black
        bearingMiddleShadow.shadowOffset = CGSize(width: 0, height: 0)
        bearingMiddleShadow.shadowBlurRadius = 11
        let outerRimShadow = NSShadow()
        outerRimShadow.shadowColor = UIColor.black
        outerRimShadow.shadowOffset = CGSize(width: 0, height: 0)
        outerRimShadow.shadowBlurRadius = 4
        let innerShellShine = NSShadow()
        innerShellShine.shadowColor = innerShellShineColor
        innerShellShine.shadowOffset = CGSize(width: 0, height: 1)
        innerShellShine.shadowBlurRadius = 3

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72))
        bezierPath.addCurve(to: CGPoint(x: -72, y: 0.5), controlPoint1: CGPoint(x: -39.54, y: -72), controlPoint2: CGPoint(x: -72, y: -39.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73), controlPoint1: CGPoint(x: -72, y: 40.54), controlPoint2: CGPoint(x: -39.54, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 73, y: 0.5), controlPoint1: CGPoint(x: 40.54, y: 73), controlPoint2: CGPoint(x: 73, y: 40.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72), controlPoint1: CGPoint(x: 73, y: -39.54), controlPoint2: CGPoint(x: 40.54, y: -72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 126, y: 0.25))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 126.5), controlPoint1: CGPoint(x: 126, y: 69.98), controlPoint2: CGPoint(x: 69.59, y: 126.5))
        bezierPath.addCurve(to: CGPoint(x: -126, y: 0.25), controlPoint1: CGPoint(x: -69.59, y: 126.5), controlPoint2: CGPoint(x: -126, y: 69.98))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -126), controlPoint1: CGPoint(x: -126, y: -69.48), controlPoint2: CGPoint(x: -69.59, y: -126))
        bezierPath.addCurve(to: CGPoint(x: 126, y: 0.25), controlPoint1: CGPoint(x: 69.59, y: -126), controlPoint2: CGPoint(x: 126, y: -69.48))
        bezierPath.close()
        goldCeramic.setFill()
        bezierPath.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.move(to: CGPoint(x: 125, y: 0))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 125), controlPoint1: CGPoint(x: 125, y: 69.03), controlPoint2: CGPoint(x: 69.04, y: 125))
        oval4Path.addCurve(to: CGPoint(x: -125, y: -0), controlPoint1: CGPoint(x: -69.04, y: 125), controlPoint2: CGPoint(x: -125, y: 69.03))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -125), controlPoint1: CGPoint(x: -125, y: -69.03), controlPoint2: CGPoint(x: -69.04, y: -125))
        oval4Path.addCurve(to: CGPoint(x: 125, y: 0), controlPoint1: CGPoint(x: 69.04, y: -125), controlPoint2: CGPoint(x: 125, y: -69.03))
        oval4Path.addLine(to: CGPoint(x: 106.62, y: 0))
        oval4Path.addCurve(to: CGPoint(x: 0, y: -106.65), controlPoint1: CGPoint(x: 106.62, y: -58.91), controlPoint2: CGPoint(x: 58.88, y: -106.65))
        oval4Path.addCurve(to: CGPoint(x: -106.62, y: -0), controlPoint1: CGPoint(x: -58.88, y: -106.65), controlPoint2: CGPoint(x: -106.62, y: -58.91))
        oval4Path.addCurve(to: CGPoint(x: -0, y: 106.65), controlPoint1: CGPoint(x: -106.62, y: 58.91), controlPoint2: CGPoint(x: -58.88, y: 106.65))
        oval4Path.addCurve(to: CGPoint(x: 106.62, y: 0), controlPoint1: CGPoint(x: 58.88, y: 106.65), controlPoint2: CGPoint(x: 106.62, y: 58.91))
        oval4Path.addLine(to: CGPoint(x: 125, y: 0))
        oval4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: outerRimShadow.shadowOffset.width * resizedShadowScale, height: outerRimShadow.shadowOffset.height * resizedShadowScale), blur: outerRimShadow.shadowBlurRadius * resizedShadowScale, color: (outerRimShadow.shadowColor as! UIColor).cgColor)
        color.setFill()
        oval4Path.fill()
        context.restoreGState()



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 127, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 127), controlPoint1: CGPoint(x: 127, y: 70.14), controlPoint2: CGPoint(x: 70.14, y: 127))
        ovalPath.addCurve(to: CGPoint(x: -127, y: -0), controlPoint1: CGPoint(x: -70.14, y: 127), controlPoint2: CGPoint(x: -127, y: 70.14))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -127), controlPoint1: CGPoint(x: -127, y: -70.14), controlPoint2: CGPoint(x: -70.14, y: -127))
        ovalPath.addCurve(to: CGPoint(x: 127, y: 0), controlPoint1: CGPoint(x: 70.14, y: -127), controlPoint2: CGPoint(x: 127, y: -70.14))
        ovalPath.addLine(to: CGPoint(x: 108.32, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -108.36), controlPoint1: CGPoint(x: 108.32, y: -59.85), controlPoint2: CGPoint(x: 59.82, y: -108.36))
        ovalPath.addCurve(to: CGPoint(x: -108.32, y: -0), controlPoint1: CGPoint(x: -59.82, y: -108.36), controlPoint2: CGPoint(x: -108.32, y: -59.85))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 108.36), controlPoint1: CGPoint(x: -108.32, y: 59.85), controlPoint2: CGPoint(x: -59.82, y: 108.36))
        ovalPath.addCurve(to: CGPoint(x: 108.32, y: 0), controlPoint1: CGPoint(x: 59.82, y: 108.36), controlPoint2: CGPoint(x: 108.32, y: 59.85))
        ovalPath.addLine(to: CGPoint(x: 127, y: 0))
        ovalPath.close()
        darkMetal.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 71, y: 0))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 71), controlPoint1: CGPoint(x: 71, y: 39.21), controlPoint2: CGPoint(x: 39.21, y: 71))
        oval2Path.addCurve(to: CGPoint(x: -71, y: -0), controlPoint1: CGPoint(x: -39.21, y: 71), controlPoint2: CGPoint(x: -71, y: 39.21))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -71), controlPoint1: CGPoint(x: -71, y: -39.21), controlPoint2: CGPoint(x: -39.21, y: -71))
        oval2Path.addCurve(to: CGPoint(x: 71, y: 0), controlPoint1: CGPoint(x: 39.21, y: -71), controlPoint2: CGPoint(x: 71, y: -39.21))
        oval2Path.addLine(to: CGPoint(x: 53.25, y: 0))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -53.25), controlPoint1: CGPoint(x: 53.25, y: -29.41), controlPoint2: CGPoint(x: 29.41, y: -53.25))
        oval2Path.addCurve(to: CGPoint(x: -53.25, y: -0), controlPoint1: CGPoint(x: -29.41, y: -53.25), controlPoint2: CGPoint(x: -53.25, y: -29.41))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 53.25), controlPoint1: CGPoint(x: -53.25, y: 29.41), controlPoint2: CGPoint(x: -29.41, y: 53.25))
        oval2Path.addCurve(to: CGPoint(x: 53.25, y: 0), controlPoint1: CGPoint(x: 29.41, y: 53.25), controlPoint2: CGPoint(x: 53.25, y: 29.41))
        oval2Path.addLine(to: CGPoint(x: 71, y: 0))
        oval2Path.close()
        darkMetal.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 84, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 85), controlPoint1: CGPoint(x: 84, y: 47.17), controlPoint2: CGPoint(x: 46.17, y: 85))
        oval3Path.addCurve(to: CGPoint(x: -85, y: 0.5), controlPoint1: CGPoint(x: -47.17, y: 85), controlPoint2: CGPoint(x: -85, y: 47.17))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -84), controlPoint1: CGPoint(x: -85, y: -46.17), controlPoint2: CGPoint(x: -47.17, y: -84))
        oval3Path.addCurve(to: CGPoint(x: 84, y: 0.5), controlPoint1: CGPoint(x: 46.17, y: -84), controlPoint2: CGPoint(x: 84, y: -46.17))
        oval3Path.addLine(to: CGPoint(x: 62.88, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: -62.88), controlPoint1: CGPoint(x: 62.88, y: -34.5), controlPoint2: CGPoint(x: 34.5, y: -62.87))
        oval3Path.addCurve(to: CGPoint(x: -63.88, y: 0.5), controlPoint1: CGPoint(x: -35.5, y: -62.88), controlPoint2: CGPoint(x: -63.87, y: -34.5))
        oval3Path.addCurve(to: CGPoint(x: -0.5, y: 63.88), controlPoint1: CGPoint(x: -63.88, y: 35.5), controlPoint2: CGPoint(x: -35.5, y: 63.88))
        oval3Path.addCurve(to: CGPoint(x: 62.88, y: 0.5), controlPoint1: CGPoint(x: 34.5, y: 63.88), controlPoint2: CGPoint(x: 62.88, y: 35.5))
        oval3Path.addLine(to: CGPoint(x: 84, y: 0.5))
        oval3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: bearingMiddleShadow.shadowOffset.width * resizedShadowScale, height: bearingMiddleShadow.shadowOffset.height * resizedShadowScale), blur: bearingMiddleShadow.shadowBlurRadius * resizedShadowScale, color: (bearingMiddleShadow.shadowColor as! UIColor).cgColor)
        darkMetal.setFill()
        oval3Path.fill()
        context.restoreGState()



        //// Oval 5 Drawing
        let oval5Path = UIBezierPath()
        oval5Path.move(to: CGPoint(x: 80, y: 0))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 80), controlPoint1: CGPoint(x: 80, y: 44.18), controlPoint2: CGPoint(x: 44.18, y: 80))
        oval5Path.addCurve(to: CGPoint(x: -80, y: -0), controlPoint1: CGPoint(x: -44.18, y: 80), controlPoint2: CGPoint(x: -80, y: 44.18))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -80), controlPoint1: CGPoint(x: -80, y: -44.18), controlPoint2: CGPoint(x: -44.18, y: -80))
        oval5Path.addCurve(to: CGPoint(x: 80, y: 0), controlPoint1: CGPoint(x: 44.18, y: -80), controlPoint2: CGPoint(x: 80, y: -44.18))
        oval5Path.addLine(to: CGPoint(x: 60, y: 0))
        oval5Path.addCurve(to: CGPoint(x: 0, y: -60), controlPoint1: CGPoint(x: 60, y: -33.14), controlPoint2: CGPoint(x: 33.14, y: -60))
        oval5Path.addCurve(to: CGPoint(x: -60, y: -0), controlPoint1: CGPoint(x: -33.14, y: -60), controlPoint2: CGPoint(x: -60, y: -33.14))
        oval5Path.addCurve(to: CGPoint(x: -0, y: 60), controlPoint1: CGPoint(x: -60, y: 33.14), controlPoint2: CGPoint(x: -33.14, y: 60))
        oval5Path.addCurve(to: CGPoint(x: 60, y: 0), controlPoint1: CGPoint(x: 33.14, y: 60), controlPoint2: CGPoint(x: 60, y: 33.14))
        oval5Path.addLine(to: CGPoint(x: 80, y: 0))
        oval5Path.close()
        silverMetalMiddles.setFill()
        oval5Path.fill()

        ////// Oval 5 Inner Shadow
        context.saveGState()
        context.clip(to: oval5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((innerShellShine.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval5OpaqueShadow = (innerShellShine.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: innerShellShine.shadowOffset.width * resizedShadowScale, height: innerShellShine.shadowOffset.height * resizedShadowScale), blur: innerShellShine.shadowBlurRadius * resizedShadowScale, color: oval5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval5OpaqueShadow.setFill()
        oval5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTransparent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let darkMetal = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let silverMetalMiddles = UIColor(red: 0.458, green: 0.458, blue: 0.458, alpha: 1.000)

        //// Bearings
        //// Symbol Drawing
        let symbolRect = CGRect(x: -150, y: -150, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 0.5)
        context.rotate(by: -30 * CGFloat.pi/180)

        let symbol2Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 3 Drawing
        context.saveGState()
        context.translateBy(x: 0.15, y: 0.53)
        context.rotate(by: -60 * CGFloat.pi/180)

        let symbol3Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 4 Drawing
        context.saveGState()
        context.translateBy(x: 0.34, y: 0.35)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol4Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 5 Drawing
        context.saveGState()
        context.translateBy(x: 0.5, y: 0)
        context.rotate(by: -120 * CGFloat.pi/180)

        let symbol5Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 6 Drawing
        context.saveGState()
        context.translateBy(x: 0.34, y: -0.15)
        context.rotate(by: -150 * CGFloat.pi/180)

        let symbol6Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 7 Drawing
        context.saveGState()
        context.translateBy(x: 0.15, y: -0.34)
        context.rotate(by: -180 * CGFloat.pi/180)

        let symbol7Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 8 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: -0.5)
        context.rotate(by: -210 * CGFloat.pi/180)

        let symbol8Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 9 Drawing
        context.saveGState()
        context.translateBy(x: -0.35, y: -0.34)
        context.rotate(by: 120 * CGFloat.pi/180)

        let symbol9Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 10 Drawing
        context.saveGState()
        context.translateBy(x: -0.5, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol10Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 11 Drawing
        context.saveGState()
        context.translateBy(x: -0.5, y: 0)
        context.rotate(by: 60 * CGFloat.pi/180)

        let symbol11Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 12 Drawing
        context.saveGState()
        context.translateBy(x: -0.53, y: 0.35)
        context.rotate(by: 30 * CGFloat.pi/180)

        let symbol12Rect = CGRect(x: -150, y: -150.5, width: 300, height: 300)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        BearingStyleStyleKit.drawBearingBalls(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()




        //// Oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 145, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: 0.5, y: 145), controlPoint1: CGPoint(x: 145, y: 80.31), controlPoint2: CGPoint(x: 80.31, y: 145))
        oval3Path.addCurve(to: CGPoint(x: -144, y: 0.5), controlPoint1: CGPoint(x: -79.31, y: 145), controlPoint2: CGPoint(x: -144, y: 80.31))
        oval3Path.addCurve(to: CGPoint(x: 0.5, y: -144), controlPoint1: CGPoint(x: -144, y: -79.31), controlPoint2: CGPoint(x: -79.31, y: -144))
        oval3Path.addCurve(to: CGPoint(x: 145, y: 0.5), controlPoint1: CGPoint(x: 80.31, y: -144), controlPoint2: CGPoint(x: 145, y: -79.31))
        oval3Path.addLine(to: CGPoint(x: 84, y: 0.5))
        oval3Path.addCurve(to: CGPoint(x: 0.5, y: -83), controlPoint1: CGPoint(x: 84, y: -45.62), controlPoint2: CGPoint(x: 46.62, y: -83))
        oval3Path.addCurve(to: CGPoint(x: -83, y: 0.5), controlPoint1: CGPoint(x: -45.62, y: -83), controlPoint2: CGPoint(x: -83, y: -45.62))
        oval3Path.addCurve(to: CGPoint(x: 0.5, y: 84), controlPoint1: CGPoint(x: -83, y: 46.62), controlPoint2: CGPoint(x: -45.62, y: 84))
        oval3Path.addCurve(to: CGPoint(x: 84, y: 0.5), controlPoint1: CGPoint(x: 46.62, y: 84), controlPoint2: CGPoint(x: 84, y: 46.62))
        oval3Path.addLine(to: CGPoint(x: 145, y: 0.5))
        oval3Path.close()
        UIColor.black.setFill()
        oval3Path.fill()

        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 147, y: 0))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 147), controlPoint1: CGPoint(x: 147, y: 81.19), controlPoint2: CGPoint(x: 81.19, y: 147))
        ovalPath.addCurve(to: CGPoint(x: -147, y: -0), controlPoint1: CGPoint(x: -81.19, y: 147), controlPoint2: CGPoint(x: -147, y: 81.19))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -147), controlPoint1: CGPoint(x: -147, y: -81.19), controlPoint2: CGPoint(x: -81.19, y: -147))
        ovalPath.addCurve(to: CGPoint(x: 147, y: 0), controlPoint1: CGPoint(x: 81.19, y: -147), controlPoint2: CGPoint(x: 147, y: -81.19))
        ovalPath.addLine(to: CGPoint(x: 133, y: 0))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -133), controlPoint1: CGPoint(x: 133, y: -73.45), controlPoint2: CGPoint(x: 73.45, y: -133))
        ovalPath.addCurve(to: CGPoint(x: -133, y: -0), controlPoint1: CGPoint(x: -73.45, y: -133), controlPoint2: CGPoint(x: -133, y: -73.45))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 133), controlPoint1: CGPoint(x: -133, y: 73.45), controlPoint2: CGPoint(x: -73.45, y: 133))
        ovalPath.addCurve(to: CGPoint(x: 133, y: 0), controlPoint1: CGPoint(x: 73.45, y: 133), controlPoint2: CGPoint(x: 133, y: 73.45))
        ovalPath.addLine(to: CGPoint(x: 147, y: 0))
        ovalPath.close()
        darkMetal.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 96, y: 0.25))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 96.5), controlPoint1: CGPoint(x: 96, y: 53.4), controlPoint2: CGPoint(x: 53.02, y: 96.5))
        oval2Path.addCurve(to: CGPoint(x: -96, y: 0.25), controlPoint1: CGPoint(x: -53.02, y: 96.5), controlPoint2: CGPoint(x: -96, y: 53.4))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -96), controlPoint1: CGPoint(x: -96, y: -52.9), controlPoint2: CGPoint(x: -53.02, y: -96))
        oval2Path.addCurve(to: CGPoint(x: 96, y: 0.25), controlPoint1: CGPoint(x: 53.02, y: -96), controlPoint2: CGPoint(x: 96, y: -52.9))
        oval2Path.addLine(to: CGPoint(x: 82, y: 0.25))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -82), controlPoint1: CGPoint(x: 82, y: -45.18), controlPoint2: CGPoint(x: 45.28, y: -82))
        oval2Path.addCurve(to: CGPoint(x: -82, y: 0.25), controlPoint1: CGPoint(x: -45.28, y: -82), controlPoint2: CGPoint(x: -82, y: -45.18))
        oval2Path.addCurve(to: CGPoint(x: -0, y: 82.5), controlPoint1: CGPoint(x: -82, y: 45.68), controlPoint2: CGPoint(x: -45.28, y: 82.5))
        oval2Path.addCurve(to: CGPoint(x: 82, y: 0.25), controlPoint1: CGPoint(x: 45.28, y: 82.5), controlPoint2: CGPoint(x: 82, y: 45.68))
        oval2Path.addLine(to: CGPoint(x: 96, y: 0.25))
        oval2Path.close()
        silverMetalMiddles.setFill()
        oval2Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBearingBalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)



        //// Gradient Declarations
        let bearingBallsGradient = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, UIColor.black.cgColor] as CFArray, locations: [0, 1])!

        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 132, y: 17, width: 37, height: 37))
        context.saveGState()
        oval4Path.addClip()
        context.drawRadialGradient(bearingBallsGradient,
            startCenter: CGPoint(x: 150.5, y: 35.5), startRadius: 8.81,
            endCenter: CGPoint(x: 150.5, y: 35.5), endRadius: 26.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawMinimal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 300)


        //// Color Declarations
        let metalWeightBlack = UIColor(red: 0.182, green: 0.182, blue: 0.182, alpha: 1.000)

        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: -88, y: -87, width: 175, height: 175))
        metalWeightBlack.setFill()
        oval6Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -72))
        bezierPath.addCurve(to: CGPoint(x: -72, y: 0.5), controlPoint1: CGPoint(x: -39.54, y: -72), controlPoint2: CGPoint(x: -72, y: -39.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 73), controlPoint1: CGPoint(x: -72, y: 40.54), controlPoint2: CGPoint(x: -39.54, y: 73))
        bezierPath.addCurve(to: CGPoint(x: 73, y: 0.5), controlPoint1: CGPoint(x: 40.54, y: 73), controlPoint2: CGPoint(x: 73, y: 40.54))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -72), controlPoint1: CGPoint(x: 73, y: -39.54), controlPoint2: CGPoint(x: 40.54, y: -72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 126, y: 0.25))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 126.5), controlPoint1: CGPoint(x: 126, y: 69.98), controlPoint2: CGPoint(x: 69.59, y: 126.5))
        bezierPath.addCurve(to: CGPoint(x: -126, y: 0.25), controlPoint1: CGPoint(x: -69.59, y: 126.5), controlPoint2: CGPoint(x: -126, y: 69.98))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -126), controlPoint1: CGPoint(x: -126, y: -69.48), controlPoint2: CGPoint(x: -69.59, y: -126))
        bezierPath.addCurve(to: CGPoint(x: 126, y: 0.25), controlPoint1: CGPoint(x: 69.59, y: -126), controlPoint2: CGPoint(x: 126, y: -69.48))
        bezierPath.close()
        metalWeightBlack.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 239, height: 231), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 239, height: 231), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 239, y: resizedFrame.height / 231)



        //// Image Declarations
        let fidgetspinnerbearingcomparision2 = UIImage(named: "fidgetspinnerbearingcomparision2.jpg")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 239, height: 231))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(fidgetspinnerbearingcomparision2.cgImage!, in: CGRect(x: 0, y: 0, width: fidgetspinnerbearingcomparision2.size.width, height: fidgetspinnerbearingcomparision2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawClassicNoCap2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 189), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 189), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 189)



        //// Image Declarations
        let fidgetspinnerbearingcomparision2 = UIImage(named: "fidgetspinnerbearingcomparision2.jpg")!

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -56, y: -92))
        bezierPath.addCurve(to: CGPoint(x: -93, y: -55), controlPoint1: CGPoint(x: -76.43, y: -92), controlPoint2: CGPoint(x: -93, y: -75.43))
        bezierPath.addCurve(to: CGPoint(x: -56, y: -18), controlPoint1: CGPoint(x: -93, y: -34.57), controlPoint2: CGPoint(x: -76.43, y: -18))
        bezierPath.addCurve(to: CGPoint(x: -19, y: -55), controlPoint1: CGPoint(x: -35.57, y: -18), controlPoint2: CGPoint(x: -19, y: -34.57))
        bezierPath.addCurve(to: CGPoint(x: -56, y: -92), controlPoint1: CGPoint(x: -19, y: -75.43), controlPoint2: CGPoint(x: -35.57, y: -92))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 39, y: -55.5))
        bezierPath.addCurve(to: CGPoint(x: -55.5, y: 39), controlPoint1: CGPoint(x: 39, y: -3.31), controlPoint2: CGPoint(x: -3.31, y: 39))
        bezierPath.addCurve(to: CGPoint(x: -150, y: -55.5), controlPoint1: CGPoint(x: -107.69, y: 39), controlPoint2: CGPoint(x: -150, y: -3.31))
        bezierPath.addCurve(to: CGPoint(x: -55.5, y: -150), controlPoint1: CGPoint(x: -150, y: -107.69), controlPoint2: CGPoint(x: -107.69, y: -150))
        bezierPath.addCurve(to: CGPoint(x: 39, y: -55.5), controlPoint1: CGPoint(x: -3.31, y: -150), controlPoint2: CGPoint(x: 39, y: -107.69))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(fidgetspinnerbearingcomparision2.cgImage!, in: CGRect(x: -171, y: 179, width: fidgetspinnerbearingcomparision2.size.width, height: fidgetspinnerbearingcomparision2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(BearingStyleStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
