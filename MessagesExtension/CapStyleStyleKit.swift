//
//  CapStyleStyleKit.swift
//  Fidget Spinner
//
//  Created by KTJW on 5/31/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CapStyleStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawCap1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, capColor: UIColor = UIColor(red: 0.749, green: 0.141, blue: 0.377, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let simpleColorBase = UIColor(red: 0.933, green: 0.933, blue: 0.933, alpha: 1.000)
        var simpleColorBaseHueComponent: CGFloat = 1
        var simpleColorBaseSaturationComponent: CGFloat = 1
        var simpleColorBaseBrightnessComponent: CGFloat = 1
        simpleColorBase.getHue(&simpleColorBaseHueComponent, saturation: &simpleColorBaseSaturationComponent, brightness: &simpleColorBaseBrightnessComponent, alpha: nil)

        let color = UIColor(hue: simpleColorBaseHueComponent, saturation: simpleColorBaseSaturationComponent, brightness: 0.6, alpha: simpleColorBase.cgColor.alpha)

        //// Gradient Declarations
        let simpleGrad1 = CGGradient(colorsSpace: nil, colors: [color.cgColor, simpleColorBase.cgColor] as CFArray, locations: [0.45, 0.89])!

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 23, y: 23, width: 254, height: 254))
        capColor.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 23, y: 23, width: 254, height: 254))
        context.saveGState()
        oval2Path.addClip()
        context.drawRadialGradient(simpleGrad1,
            startCenter: CGPoint(x: 150, y: 150), startRadius: 25.29,
            endCenter: CGPoint(x: 150, y: 150), endRadius: 175.17,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCap5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, capColor: UIColor = UIColor(red: 0.749, green: 0.141, blue: 0.377, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let gradientColor9 = UIColor(red: 0.612, green: 0.620, blue: 0.629, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.873, green: 0.854, blue: 0.845, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.941, green: 0.946, blue: 0.946, alpha: 1.000)
        let gradientColor5 = UIColor(red: 0.426, green: 0.410, blue: 0.427, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.326, green: 0.326, blue: 0.326, alpha: 1.000)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor6 = UIColor(red: 0.779, green: 0.788, blue: 0.793, alpha: 1.000)
        let gradientColor11 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor8 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.471, green: 0.454, blue: 0.479, alpha: 1.000)
        let gradientColor7 = UIColor(red: 0.835, green: 0.821, blue: 0.802, alpha: 1.000)
        let gradientColor10 = UIColor(red: 0.590, green: 0.598, blue: 0.611, alpha: 1.000)
        let gradientColor12 = UIColor(red: 0.213, green: 0.246, blue: 0.260, alpha: 1.000)

        //// Gradient Declarations
        let gradient3 = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor11.cgColor] as CFArray, locations: [0, 1])!
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor7.cgColor, gradientColor3.cgColor, gradientColor4.cgColor, gradientColor5.cgColor, gradientColor10.cgColor, gradientColor6.cgColor] as CFArray, locations: [0, 0.26, 0.52, 0.88, 1, 1])!
        let gradient4 = CGGradient(colorsSpace: nil, colors: [gradientColor8.cgColor, gradientColor9.cgColor, gradientColor12.cgColor] as CFArray, locations: [0, 0.52, 1])!

        //// Group 6
        //// Group
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 22.5, y: 24, width: 253.7, height: 253.7))
        fillColor2.setFill()
        oval3Path.fill()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(ovalIn: CGRect(x: 24.65, y: 26.15, width: 249.4, height: 249.4))
        clip2Path.addClip()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 24.65, y: 26.15, width: 249.4, height: 249.4))
        context.saveGState()
        oval4Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: 149.38, y: 316.31),
            end: CGPoint(x: 149.38, y: -63.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 263.97, y: 150.84))
        clip3Path.addCurve(to: CGPoint(x: 227.91, y: 247.61), controlPoint1: CGPoint(x: 263.97, y: 188.99), controlPoint2: CGPoint(x: 250.11, y: 223.37))
        clip3Path.addLine(to: CGPoint(x: 227.91, y: 247.61))
        clip3Path.addCurve(to: CGPoint(x: 274.05, y: 150.84), controlPoint1: CGPoint(x: 256.06, y: 224.76), controlPoint2: CGPoint(x: 274.05, y: 189.9))
        clip3Path.addLine(to: CGPoint(x: 274.05, y: 150.84))
        clip3Path.addCurve(to: CGPoint(x: 227.91, y: 54.07), controlPoint1: CGPoint(x: 274.05, y: 111.77), controlPoint2: CGPoint(x: 256.06, y: 76.91))
        clip3Path.addLine(to: CGPoint(x: 227.91, y: 54.07))
        clip3Path.addCurve(to: CGPoint(x: 263.97, y: 150.84), controlPoint1: CGPoint(x: 250.11, y: 78.3), controlPoint2: CGPoint(x: 263.97, y: 112.69))
        clip3Path.close()
        clip3Path.move(to: CGPoint(x: 24.69, y: 150.84))
        clip3Path.addCurve(to: CGPoint(x: 70.83, y: 247.61), controlPoint1: CGPoint(x: 24.69, y: 189.9), controlPoint2: CGPoint(x: 42.69, y: 224.77))
        clip3Path.addLine(to: CGPoint(x: 70.83, y: 247.61))
        clip3Path.addCurve(to: CGPoint(x: 34.77, y: 150.84), controlPoint1: CGPoint(x: 48.63, y: 223.37), controlPoint2: CGPoint(x: 34.77, y: 188.99))
        clip3Path.addLine(to: CGPoint(x: 34.77, y: 150.84))
        clip3Path.addCurve(to: CGPoint(x: 70.83, y: 54.07), controlPoint1: CGPoint(x: 34.77, y: 112.69), controlPoint2: CGPoint(x: 48.63, y: 78.3))
        clip3Path.addLine(to: CGPoint(x: 70.83, y: 54.07))
        clip3Path.addCurve(to: CGPoint(x: 24.69, y: 150.84), controlPoint1: CGPoint(x: 42.69, y: 76.91), controlPoint2: CGPoint(x: 24.69, y: 111.77))
        clip3Path.close()
        clip3Path.addClip()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 263.97, y: 150.84))
        bezier17Path.addCurve(to: CGPoint(x: 227.91, y: 247.61), controlPoint1: CGPoint(x: 263.97, y: 188.99), controlPoint2: CGPoint(x: 250.11, y: 223.37))
        bezier17Path.addLine(to: CGPoint(x: 227.91, y: 247.61))
        bezier17Path.addCurve(to: CGPoint(x: 274.05, y: 150.84), controlPoint1: CGPoint(x: 256.06, y: 224.76), controlPoint2: CGPoint(x: 274.05, y: 189.9))
        bezier17Path.addLine(to: CGPoint(x: 274.05, y: 150.84))
        bezier17Path.addCurve(to: CGPoint(x: 227.91, y: 54.07), controlPoint1: CGPoint(x: 274.05, y: 111.77), controlPoint2: CGPoint(x: 256.06, y: 76.91))
        bezier17Path.addLine(to: CGPoint(x: 227.91, y: 54.07))
        bezier17Path.addCurve(to: CGPoint(x: 263.97, y: 150.84), controlPoint1: CGPoint(x: 250.11, y: 78.3), controlPoint2: CGPoint(x: 263.97, y: 112.69))
        bezier17Path.close()
        bezier17Path.move(to: CGPoint(x: 24.69, y: 150.84))
        bezier17Path.addCurve(to: CGPoint(x: 70.83, y: 247.61), controlPoint1: CGPoint(x: 24.69, y: 189.9), controlPoint2: CGPoint(x: 42.69, y: 224.77))
        bezier17Path.addLine(to: CGPoint(x: 70.83, y: 247.61))
        bezier17Path.addCurve(to: CGPoint(x: 34.77, y: 150.84), controlPoint1: CGPoint(x: 48.63, y: 223.37), controlPoint2: CGPoint(x: 34.77, y: 188.99))
        bezier17Path.addLine(to: CGPoint(x: 34.77, y: 150.84))
        bezier17Path.addCurve(to: CGPoint(x: 70.83, y: 54.07), controlPoint1: CGPoint(x: 34.77, y: 112.69), controlPoint2: CGPoint(x: 48.63, y: 78.3))
        bezier17Path.addLine(to: CGPoint(x: 70.83, y: 54.07))
        bezier17Path.addCurve(to: CGPoint(x: 24.69, y: 150.84), controlPoint1: CGPoint(x: 42.69, y: 76.91), controlPoint2: CGPoint(x: 24.69, y: 111.77))
        bezier17Path.close()
        context.saveGState()
        bezier17Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: 149.37, y: 120.56),
            end: CGPoint(x: 149.37, y: 237.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 37.05, y: 38.55, width: 224.6, height: 224.6))
        capColor.setFill()
        oval6Path.fill()


        //// Group 4
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath()
        clip4Path.move(to: CGPoint(x: 42.53, y: 149.56))
        clip4Path.addCurve(to: CGPoint(x: 50.16, y: 190.83), controlPoint1: CGPoint(x: 42.53, y: 164.12), controlPoint2: CGPoint(x: 45.24, y: 178.03))
        clip4Path.addLine(to: CGPoint(x: 50.16, y: 190.83))
        clip4Path.addCurve(to: CGPoint(x: 44.45, y: 149.56), controlPoint1: CGPoint(x: 46.44, y: 177.72), controlPoint2: CGPoint(x: 44.45, y: 163.88))
        clip4Path.addLine(to: CGPoint(x: 44.45, y: 149.56))
        clip4Path.addCurve(to: CGPoint(x: 50.16, y: 108.3), controlPoint1: CGPoint(x: 44.45, y: 135.25), controlPoint2: CGPoint(x: 46.44, y: 121.41))
        clip4Path.addLine(to: CGPoint(x: 50.16, y: 108.3))
        clip4Path.addCurve(to: CGPoint(x: 42.53, y: 149.56), controlPoint1: CGPoint(x: 45.24, y: 121.09), controlPoint2: CGPoint(x: 42.53, y: 135.01))
        clip4Path.close()
        clip4Path.addClip()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 42.53, y: 149.56))
        bezier19Path.addCurve(to: CGPoint(x: 50.16, y: 190.83), controlPoint1: CGPoint(x: 42.53, y: 164.12), controlPoint2: CGPoint(x: 45.24, y: 178.03))
        bezier19Path.addLine(to: CGPoint(x: 50.16, y: 190.83))
        bezier19Path.addCurve(to: CGPoint(x: 44.45, y: 149.56), controlPoint1: CGPoint(x: 46.44, y: 177.72), controlPoint2: CGPoint(x: 44.45, y: 163.88))
        bezier19Path.addLine(to: CGPoint(x: 44.45, y: 149.56))
        bezier19Path.addCurve(to: CGPoint(x: 50.16, y: 108.3), controlPoint1: CGPoint(x: 44.45, y: 135.25), controlPoint2: CGPoint(x: 46.44, y: 121.41))
        bezier19Path.addLine(to: CGPoint(x: 50.16, y: 108.3))
        bezier19Path.addCurve(to: CGPoint(x: 42.53, y: 149.56), controlPoint1: CGPoint(x: 45.24, y: 121.09), controlPoint2: CGPoint(x: 42.53, y: 135.01))
        bezier19Path.close()
        context.saveGState()
        bezier19Path.addClip()
        context.drawRadialGradient(gradient4,
            startCenter: CGPoint(x: 46.35, y: 149.56), startRadius: 0,
            endCenter: CGPoint(x: 46.35, y: 149.56), endRadius: 29.3,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath()
        clip5Path.move(to: CGPoint(x: 254.67, y: 148.29))
        clip5Path.addCurve(to: CGPoint(x: 248.95, y: 189.06), controlPoint1: CGPoint(x: 254.67, y: 162.43), controlPoint2: CGPoint(x: 252.67, y: 176.11))
        clip5Path.addLine(to: CGPoint(x: 248.95, y: 189.06))
        clip5Path.addCurve(to: CGPoint(x: 256.58, y: 148.29), controlPoint1: CGPoint(x: 253.87, y: 176.42), controlPoint2: CGPoint(x: 256.58, y: 162.67))
        clip5Path.addLine(to: CGPoint(x: 256.58, y: 148.29))
        clip5Path.addCurve(to: CGPoint(x: 248.95, y: 107.53), controlPoint1: CGPoint(x: 256.58, y: 133.91), controlPoint2: CGPoint(x: 253.87, y: 120.17))
        clip5Path.addLine(to: CGPoint(x: 248.95, y: 107.53))
        clip5Path.addCurve(to: CGPoint(x: 254.67, y: 148.29), controlPoint1: CGPoint(x: 252.67, y: 120.47), controlPoint2: CGPoint(x: 254.67, y: 134.15))
        clip5Path.close()
        clip5Path.addClip()


        //// Bezier 21 Drawing
        let bezier21Path = UIBezierPath()
        bezier21Path.move(to: CGPoint(x: 254.67, y: 148.29))
        bezier21Path.addCurve(to: CGPoint(x: 248.95, y: 189.06), controlPoint1: CGPoint(x: 254.67, y: 162.43), controlPoint2: CGPoint(x: 252.67, y: 176.11))
        bezier21Path.addLine(to: CGPoint(x: 248.95, y: 189.06))
        bezier21Path.addCurve(to: CGPoint(x: 256.58, y: 148.29), controlPoint1: CGPoint(x: 253.87, y: 176.42), controlPoint2: CGPoint(x: 256.58, y: 162.67))
        bezier21Path.addLine(to: CGPoint(x: 256.58, y: 148.29))
        bezier21Path.addCurve(to: CGPoint(x: 248.95, y: 107.53), controlPoint1: CGPoint(x: 256.58, y: 133.91), controlPoint2: CGPoint(x: 253.87, y: 120.17))
        bezier21Path.addLine(to: CGPoint(x: 248.95, y: 107.53))
        bezier21Path.addCurve(to: CGPoint(x: 254.67, y: 148.29), controlPoint1: CGPoint(x: 252.67, y: 120.47), controlPoint2: CGPoint(x: 254.67, y: 134.15))
        bezier21Path.close()
        context.saveGState()
        bezier21Path.addClip()
        context.drawRadialGradient(gradient4,
            startCenter: CGPoint(x: 252.77, y: 148.29), startRadius: 0,
            endCenter: CGPoint(x: 252.77, y: 148.29), endRadius: 28.95,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 8
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 8
        let clip8Path = UIBezierPath()
        clip8Path.move(to: CGPoint(x: 149.37, y: 256.88))
        clip8Path.addCurve(to: CGPoint(x: 48.23, y: 186.44), controlPoint1: CGPoint(x: 103.02, y: 256.88), controlPoint2: CGPoint(x: 63.51, y: 227.58))
        clip8Path.addLine(to: CGPoint(x: 48.23, y: 186.44))
        clip8Path.addCurve(to: CGPoint(x: 149.37, y: 259.45), controlPoint1: CGPoint(x: 62.37, y: 228.87), controlPoint2: CGPoint(x: 102.31, y: 259.45))
        clip8Path.addLine(to: CGPoint(x: 149.37, y: 259.45))
        clip8Path.addCurve(to: CGPoint(x: 250.51, y: 186.44), controlPoint1: CGPoint(x: 196.44, y: 259.45), controlPoint2: CGPoint(x: 236.38, y: 228.87))
        clip8Path.addLine(to: CGPoint(x: 250.51, y: 186.44))
        clip8Path.addCurve(to: CGPoint(x: 149.37, y: 256.88), controlPoint1: CGPoint(x: 235.23, y: 227.58), controlPoint2: CGPoint(x: 195.72, y: 256.88))
        clip8Path.close()
        clip8Path.addClip()


        //// Bezier 23 Drawing
        let bezier23Path = UIBezierPath()
        bezier23Path.move(to: CGPoint(x: 149.37, y: 256.88))
        bezier23Path.addCurve(to: CGPoint(x: 48.23, y: 186.44), controlPoint1: CGPoint(x: 103.02, y: 256.88), controlPoint2: CGPoint(x: 63.51, y: 227.58))
        bezier23Path.addLine(to: CGPoint(x: 48.23, y: 186.44))
        bezier23Path.addCurve(to: CGPoint(x: 149.37, y: 259.45), controlPoint1: CGPoint(x: 62.37, y: 228.87), controlPoint2: CGPoint(x: 102.31, y: 259.45))
        bezier23Path.addLine(to: CGPoint(x: 149.37, y: 259.45))
        bezier23Path.addCurve(to: CGPoint(x: 250.51, y: 186.44), controlPoint1: CGPoint(x: 196.44, y: 259.45), controlPoint2: CGPoint(x: 236.38, y: 228.87))
        bezier23Path.addLine(to: CGPoint(x: 250.51, y: 186.44))
        bezier23Path.addCurve(to: CGPoint(x: 149.37, y: 256.88), controlPoint1: CGPoint(x: 235.23, y: 227.58), controlPoint2: CGPoint(x: 195.72, y: 256.88))
        bezier23Path.close()
        context.saveGState()
        bezier23Path.addClip()
        context.drawRadialGradient(gradient3,
            startCenter: CGPoint(x: 149.69, y: 245.27), startRadius: 0,
            endCenter: CGPoint(x: 149.69, y: 245.27), endRadius: 137.08,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 9
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 9
        let clip9Path = UIBezierPath()
        clip9Path.move(to: CGPoint(x: 48.23, y: 111.42))
        clip9Path.addCurve(to: CGPoint(x: 149.37, y: 41.94), controlPoint1: CGPoint(x: 63.51, y: 70.84), controlPoint2: CGPoint(x: 103.02, y: 41.94))
        clip9Path.addLine(to: CGPoint(x: 149.37, y: 41.94))
        clip9Path.addCurve(to: CGPoint(x: 250.51, y: 111.42), controlPoint1: CGPoint(x: 195.72, y: 41.94), controlPoint2: CGPoint(x: 235.23, y: 70.84))
        clip9Path.addLine(to: CGPoint(x: 250.51, y: 111.42))
        clip9Path.addCurve(to: CGPoint(x: 149.37, y: 39.41), controlPoint1: CGPoint(x: 236.38, y: 69.57), controlPoint2: CGPoint(x: 196.44, y: 39.41))
        clip9Path.addLine(to: CGPoint(x: 149.37, y: 39.41))
        clip9Path.addCurve(to: CGPoint(x: 48.23, y: 111.42), controlPoint1: CGPoint(x: 102.31, y: 39.41), controlPoint2: CGPoint(x: 62.37, y: 69.57))
        clip9Path.close()
        clip9Path.addClip()


        //// Bezier 25 Drawing
        let bezier25Path = UIBezierPath()
        bezier25Path.move(to: CGPoint(x: 48.23, y: 111.42))
        bezier25Path.addCurve(to: CGPoint(x: 149.37, y: 41.94), controlPoint1: CGPoint(x: 63.51, y: 70.84), controlPoint2: CGPoint(x: 103.02, y: 41.94))
        bezier25Path.addLine(to: CGPoint(x: 149.37, y: 41.94))
        bezier25Path.addCurve(to: CGPoint(x: 250.51, y: 111.42), controlPoint1: CGPoint(x: 195.72, y: 41.94), controlPoint2: CGPoint(x: 235.23, y: 70.84))
        bezier25Path.addLine(to: CGPoint(x: 250.51, y: 111.42))
        bezier25Path.addCurve(to: CGPoint(x: 149.37, y: 39.41), controlPoint1: CGPoint(x: 236.38, y: 69.57), controlPoint2: CGPoint(x: 196.44, y: 39.41))
        bezier25Path.addLine(to: CGPoint(x: 149.37, y: 39.41))
        bezier25Path.addCurve(to: CGPoint(x: 48.23, y: 111.42), controlPoint1: CGPoint(x: 102.31, y: 39.41), controlPoint2: CGPoint(x: 62.37, y: 69.57))
        bezier25Path.close()
        context.saveGState()
        bezier25Path.addClip()
        context.drawRadialGradient(gradient3,
            startCenter: CGPoint(x: 149.05, y: 53.12), startRadius: 0,
            endCenter: CGPoint(x: 149.05, y: 53.12), endRadius: 136.86,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 27 Drawing
        let bezier27Path = UIBezierPath()
        bezier27Path.move(to: CGPoint(x: 149.38, y: 266.82))
        bezier27Path.addCurve(to: CGPoint(x: 32.14, y: 153.92), controlPoint1: CGPoint(x: 85.41, y: 266.82), controlPoint2: CGPoint(x: 33.4, y: 215.07))
        bezier27Path.addCurve(to: CGPoint(x: 32.11, y: 156.29), controlPoint1: CGPoint(x: 32.12, y: 154.71), controlPoint2: CGPoint(x: 32.11, y: 155.5))
        bezier27Path.addCurve(to: CGPoint(x: 149.38, y: 273.57), controlPoint1: CGPoint(x: 32.11, y: 221.06), controlPoint2: CGPoint(x: 84.61, y: 273.57))
        bezier27Path.addCurve(to: CGPoint(x: 266.66, y: 156.29), controlPoint1: CGPoint(x: 214.15, y: 273.57), controlPoint2: CGPoint(x: 266.66, y: 221.06))
        bezier27Path.addCurve(to: CGPoint(x: 266.63, y: 153.92), controlPoint1: CGPoint(x: 266.66, y: 155.5), controlPoint2: CGPoint(x: 266.65, y: 154.71))
        bezier27Path.addCurve(to: CGPoint(x: 149.38, y: 266.82), controlPoint1: CGPoint(x: 265.37, y: 215.07), controlPoint2: CGPoint(x: 213.36, y: 266.82))
        bezier27Path.close()
        fillColor4.setFill()
        bezier27Path.fill()


        //// Bezier 28 Drawing
        let bezier28Path = UIBezierPath()
        bezier28Path.move(to: CGPoint(x: 149.38, y: 36.07))
        bezier28Path.addCurve(to: CGPoint(x: 266.63, y: 147.06), controlPoint1: CGPoint(x: 213.36, y: 36.07), controlPoint2: CGPoint(x: 265.37, y: 85.91))
        bezier28Path.addCurve(to: CGPoint(x: 266.66, y: 144.69), controlPoint1: CGPoint(x: 266.65, y: 146.27), controlPoint2: CGPoint(x: 266.66, y: 145.48))
        bezier28Path.addCurve(to: CGPoint(x: 149.38, y: 27.41), controlPoint1: CGPoint(x: 266.66, y: 79.92), controlPoint2: CGPoint(x: 214.15, y: 27.41))
        bezier28Path.addCurve(to: CGPoint(x: 32.11, y: 144.69), controlPoint1: CGPoint(x: 84.61, y: 27.41), controlPoint2: CGPoint(x: 32.11, y: 79.92))
        bezier28Path.addCurve(to: CGPoint(x: 32.14, y: 147.06), controlPoint1: CGPoint(x: 32.11, y: 145.48), controlPoint2: CGPoint(x: 32.12, y: 146.27))
        bezier28Path.addCurve(to: CGPoint(x: 149.38, y: 36.07), controlPoint1: CGPoint(x: 33.4, y: 85.91), controlPoint2: CGPoint(x: 85.41, y: 36.07))
        bezier28Path.close()
        fillColor4.setFill()
        bezier28Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCap3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, capColor: UIColor = UIColor(red: 0.749, green: 0.141, blue: 0.377, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor15 = UIColor(red: 0.192, green: 0.192, blue: 0.195, alpha: 1.000)
        let gradientColor16 = UIColor(red: 0.878, green: 0.883, blue: 0.888, alpha: 1.000)
        let gradientColor17 = UIColor(red: 0.774, green: 0.783, blue: 0.788, alpha: 1.000)
        let gradientColor18 = UIColor(red: 0.678, green: 0.687, blue: 0.696, alpha: 1.000)
        let gradientColor19 = UIColor(red: 0.517, green: 0.530, blue: 0.538, alpha: 1.000)

        //// Gradient Declarations
        let gradient8 = CGGradient(colorsSpace: nil, colors: [fillColor4.cgColor, capColor.cgColor] as CFArray, locations: [0, 1])!
        let gradient9 = CGGradient(colorsSpace: nil, colors: [gradientColor16.cgColor, gradientColor17.cgColor, gradientColor16.cgColor] as CFArray, locations: [0, 0.43, 1])!
        let gradient10 = CGGradient(colorsSpace: nil, colors: [gradientColor16.cgColor, gradientColor19.cgColor, gradientColor18.cgColor, gradientColor15.cgColor] as CFArray, locations: [0, 0.42, 0.7, 1])!

        //// Group 19
        //// Group 16
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 16
        let clip16Path = UIBezierPath(ovalIn: CGRect(x: 22.7, y: 23.28, width: 254.1, height: 253.6))
        clip16Path.addClip()


        //// Oval 42 Drawing
        let oval42Path = UIBezierPath(ovalIn: CGRect(x: 22.7, y: 23.28, width: 254.1, height: 253.6))
        context.saveGState()
        oval42Path.addClip()
        context.drawRadialGradient(gradient10,
            startCenter: CGPoint(x: 149.87, y: 150.24), startRadius: 0,
            endCenter: CGPoint(x: 149.87, y: 150.24), endRadius: 172.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 17
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 17
        let clip17Path = UIBezierPath(ovalIn: CGRect(x: 39.8, y: 40.34, width: 219.9, height: 219.5))
        clip17Path.addClip()


        //// Oval 44 Drawing
        let oval44Path = UIBezierPath(ovalIn: CGRect(x: 39.8, y: 40.34, width: 219.9, height: 219.5))
        context.saveGState()
        oval44Path.addClip()
        context.drawRadialGradient(gradient9,
            startCenter: CGPoint(x: 213.6, y: 108.48), startRadius: 0,
            endCenter: CGPoint(x: 213.6, y: 108.48), endRadius: 148.81,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 18
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 18
        let clip18Path = UIBezierPath(ovalIn: CGRect(x: 49.8, y: 50.38, width: 199.9, height: 199.5))
        clip18Path.addClip()


        //// Oval 46 Drawing
        let oval46Path = UIBezierPath(ovalIn: CGRect(x: 49.8, y: 50.38, width: 199.9, height: 199.5))
        context.saveGState()
        oval46Path.addClip()
        context.drawRadialGradient(gradient8,
            startCenter: CGPoint(x: 151.87, y: 156.2), startRadius: 0,
            endCenter: CGPoint(x: 151.87, y: 156.2), endRadius: 133.03,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval 48 Drawing
        context.saveGState()
        context.setAlpha(0.11)

        let oval48Path = UIBezierPath(ovalIn: CGRect(x: 79.95, y: 54.43, width: 141, height: 89.3))
        fillColor4.setFill()
        oval48Path.fill()

        context.restoreGState()


        //// Oval 49 Drawing
        context.saveGState()
        context.translateBy(x: 104.93, y: 78.11)
        context.rotate(by: -37.65 * CGFloat.pi/180)

        let oval49Path = UIBezierPath(ovalIn: CGRect(x: -13.39, y: -6.74, width: 26.79, height: 13.48))
        fillColor4.setFill()
        oval49Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCap2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, capColor: UIColor = UIColor(red: 0.749, green: 0.141, blue: 0.377, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let gradientColor21 = UIColor(red: 1.000, green: 0.998, blue: 0.995, alpha: 1.000)

        //// Gradient Declarations
        let gradient11 = CGGradient(colorsSpace: nil, colors: [gradientColor21.cgColor, capColor.cgColor] as CFArray, locations: [0, 1])!

        //// Group
        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 22.34, y: 24.18, width: 253.6, height: 253.6))
        context.saveGState()
        oval4Path.addClip()
        context.drawLinearGradient(gradient11,
            start: CGPoint(x: 150.85, y: 25.87),
            end: CGPoint(x: 147.28, y: 286.5),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 37.39, y: 39.23, width: 223.5, height: 223.5))
        context.saveGState()
        oval5Path.addClip()
        context.drawLinearGradient(gradient11,
            start: CGPoint(x: 149.14, y: 264.45),
            end: CGPoint(x: 149.14, y: 38.49),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 44.94, y: 46.78, width: 208.4, height: 208.4))
        context.saveGState()
        oval6Path.addClip()
        context.drawLinearGradient(gradient11,
            start: CGPoint(x: 149.14, y: 46.77),
            end: CGPoint(x: 149.14, y: 255.69),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCap4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, capColor: UIColor = UIColor(red: 0.749, green: 0.141, blue: 0.377, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor22 = UIColor(red: 0.990, green: 0.990, blue: 1.000, alpha: 1.000)
        let gradientColor23 = UIColor(red: 0.510, green: 0.568, blue: 0.594, alpha: 1.000)
        let gradientColor24 = UIColor(red: 0.608, green: 0.652, blue: 0.664, alpha: 1.000)
        let gradientColor25 = UIColor(red: 0.247, green: 0.293, blue: 0.318, alpha: 1.000)
        let gradientColor26 = UIColor(red: 0.971, green: 0.990, blue: 0.990, alpha: 1.000)
        let gradientColor27 = UIColor(red: 0.531, green: 0.602, blue: 0.651, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.916, green: 0.901, blue: 0.931, alpha: 1.000)

        //// Gradient Declarations
        let gradient12 = CGGradient(colorsSpace: nil, colors: [gradientColor28.cgColor, gradientColor26.cgColor, gradientColor24.cgColor, gradientColor25.cgColor, gradientColor27.cgColor, gradientColor22.cgColor, gradientColor23.cgColor] as CFArray, locations: [0, 0.14, 0.42, 0.6, 0.7, 0.87, 1])!
        let gradient13 = CGGradient(colorsSpace: nil, colors: [gradientColor28.cgColor, gradientColor26.cgColor, gradientColor24.cgColor, gradientColor25.cgColor, gradientColor27.cgColor, gradientColor22.cgColor, gradientColor23.cgColor] as CFArray, locations: [0, 0.18, 0.48, 0.6, 0.67, 0.87, 1])!
        let gradient14 = CGGradient(colorsSpace: nil, colors: [capColor.cgColor, fillColor4.cgColor] as CFArray, locations: [0, 1])!

        //// Group 24
        //// Group 19
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 19
        let clip19Path = UIBezierPath(ovalIn: CGRect(x: 22.55, y: 23.58, width: 254.5, height: 254.5))
        clip19Path.addClip()


        //// Oval 20 Drawing
        let oval20Path = UIBezierPath(ovalIn: CGRect(x: 22.55, y: 23.58, width: 254.5, height: 254.5))
        context.saveGState()
        oval20Path.addClip()
        context.drawLinearGradient(gradient12,
            start: CGPoint(x: 149.84, y: 23.61),
            end: CGPoint(x: 149.84, y: 278.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 20
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 20
        let clip20Path = UIBezierPath(ovalIn: CGRect(x: 40.45, y: 41.49, width: 218.7, height: 218.7))
        clip20Path.addClip()


        //// Oval 22 Drawing
        let oval22Path = UIBezierPath(ovalIn: CGRect(x: 40.45, y: 41.49, width: 218.7, height: 218.7))
        context.saveGState()
        oval22Path.addClip()
        context.drawRadialGradient(gradient13,
            startCenter: CGPoint(x: 149.83, y: 150.87), startRadius: 0,
            endCenter: CGPoint(x: 149.83, y: 150.87), endRadius: 109.34,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 21
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 21
        let clip21Path = UIBezierPath(ovalIn: CGRect(x: 46.05, y: 47.08, width: 207.5, height: 207.5))
        clip21Path.addClip()


        //// Oval 24 Drawing
        let oval24Path = UIBezierPath(ovalIn: CGRect(x: 46.05, y: 47.08, width: 207.5, height: 207.5))
        context.saveGState()
        oval24Path.addClip()
        context.drawLinearGradient(gradient14,
            start: CGPoint(x: 155.9, y: 77.19),
            end: CGPoint(x: 147.92, y: 174.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 22
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 22
        let clip22Path = UIBezierPath()
        clip22Path.move(to: CGPoint(x: 68.44, y: 151.35))
        clip22Path.addCurve(to: CGPoint(x: 150.32, y: 233.23), controlPoint1: CGPoint(x: 68.44, y: 196.57), controlPoint2: CGPoint(x: 105.1, y: 233.23))
        clip22Path.addLine(to: CGPoint(x: 150.32, y: 233.23))
        clip22Path.addCurve(to: CGPoint(x: 232.19, y: 151.35), controlPoint1: CGPoint(x: 195.54, y: 233.23), controlPoint2: CGPoint(x: 232.19, y: 196.57))
        clip22Path.addLine(to: CGPoint(x: 232.19, y: 151.35))
        clip22Path.addCurve(to: CGPoint(x: 150.32, y: 69.48), controlPoint1: CGPoint(x: 232.19, y: 106.13), controlPoint2: CGPoint(x: 195.54, y: 69.48))
        clip22Path.addLine(to: CGPoint(x: 150.32, y: 69.48))
        clip22Path.addCurve(to: CGPoint(x: 68.44, y: 151.35), controlPoint1: CGPoint(x: 105.1, y: 69.48), controlPoint2: CGPoint(x: 68.44, y: 106.13))
        clip22Path.close()
        clip22Path.move(to: CGPoint(x: 72.52, y: 151.35))
        clip22Path.addCurve(to: CGPoint(x: 150.32, y: 73.56), controlPoint1: CGPoint(x: 72.52, y: 108.39), controlPoint2: CGPoint(x: 107.35, y: 73.56))
        clip22Path.addLine(to: CGPoint(x: 150.32, y: 73.56))
        clip22Path.addCurve(to: CGPoint(x: 228.11, y: 151.35), controlPoint1: CGPoint(x: 193.28, y: 73.56), controlPoint2: CGPoint(x: 228.11, y: 108.39))
        clip22Path.addLine(to: CGPoint(x: 228.11, y: 151.35))
        clip22Path.addCurve(to: CGPoint(x: 150.32, y: 229.14), controlPoint1: CGPoint(x: 228.11, y: 194.32), controlPoint2: CGPoint(x: 193.28, y: 229.14))
        clip22Path.addLine(to: CGPoint(x: 150.32, y: 229.14))
        clip22Path.addCurve(to: CGPoint(x: 72.52, y: 151.35), controlPoint1: CGPoint(x: 107.35, y: 229.14), controlPoint2: CGPoint(x: 72.52, y: 194.32))
        clip22Path.close()
        clip22Path.addClip()


        //// Bezier 102 Drawing
        let bezier102Path = UIBezierPath()
        bezier102Path.move(to: CGPoint(x: 68.44, y: 151.35))
        bezier102Path.addCurve(to: CGPoint(x: 150.32, y: 233.23), controlPoint1: CGPoint(x: 68.44, y: 196.57), controlPoint2: CGPoint(x: 105.1, y: 233.23))
        bezier102Path.addLine(to: CGPoint(x: 150.32, y: 233.23))
        bezier102Path.addCurve(to: CGPoint(x: 232.19, y: 151.35), controlPoint1: CGPoint(x: 195.54, y: 233.23), controlPoint2: CGPoint(x: 232.19, y: 196.57))
        bezier102Path.addLine(to: CGPoint(x: 232.19, y: 151.35))
        bezier102Path.addCurve(to: CGPoint(x: 150.32, y: 69.48), controlPoint1: CGPoint(x: 232.19, y: 106.13), controlPoint2: CGPoint(x: 195.54, y: 69.48))
        bezier102Path.addLine(to: CGPoint(x: 150.32, y: 69.48))
        bezier102Path.addCurve(to: CGPoint(x: 68.44, y: 151.35), controlPoint1: CGPoint(x: 105.1, y: 69.48), controlPoint2: CGPoint(x: 68.44, y: 106.13))
        bezier102Path.close()
        bezier102Path.move(to: CGPoint(x: 72.52, y: 151.35))
        bezier102Path.addCurve(to: CGPoint(x: 150.32, y: 73.56), controlPoint1: CGPoint(x: 72.52, y: 108.39), controlPoint2: CGPoint(x: 107.35, y: 73.56))
        bezier102Path.addLine(to: CGPoint(x: 150.32, y: 73.56))
        bezier102Path.addCurve(to: CGPoint(x: 228.11, y: 151.35), controlPoint1: CGPoint(x: 193.28, y: 73.56), controlPoint2: CGPoint(x: 228.11, y: 108.39))
        bezier102Path.addLine(to: CGPoint(x: 228.11, y: 151.35))
        bezier102Path.addCurve(to: CGPoint(x: 150.32, y: 229.14), controlPoint1: CGPoint(x: 228.11, y: 194.32), controlPoint2: CGPoint(x: 193.28, y: 229.14))
        bezier102Path.addLine(to: CGPoint(x: 150.32, y: 229.14))
        bezier102Path.addCurve(to: CGPoint(x: 72.52, y: 151.35), controlPoint1: CGPoint(x: 107.35, y: 229.14), controlPoint2: CGPoint(x: 72.52, y: 194.32))
        bezier102Path.close()
        context.saveGState()
        bezier102Path.addClip()
        context.drawRadialGradient(gradient13,
            startCenter: CGPoint(x: 155.81, y: 40.94), startRadius: 0,
            endCenter: CGPoint(x: 155.81, y: 40.94), endRadius: 245.26,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 23
        context.saveGState()
        context.setAlpha(0.17)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 23
        let clip23Path = UIBezierPath()
        clip23Path.move(to: CGPoint(x: 253.25, y: 138.7))
        clip23Path.addCurve(to: CGPoint(x: 149.98, y: 47.11), controlPoint1: CGPoint(x: 247.51, y: 87.18), controlPoint2: CGPoint(x: 203.47, y: 47.11))
        clip23Path.addCurve(to: CGPoint(x: 46.09, y: 147.72), controlPoint1: CGPoint(x: 93.41, y: 47.11), controlPoint2: CGPoint(x: 47.39, y: 91.93))
        clip23Path.addCurve(to: CGPoint(x: 253.25, y: 138.7), controlPoint1: CGPoint(x: 80.84, y: 157.51), controlPoint2: CGPoint(x: 170.73, y: 176.3))
        clip23Path.close()
        clip23Path.addClip()


        //// Bezier 104 Drawing
        let bezier104Path = UIBezierPath()
        bezier104Path.move(to: CGPoint(x: 253.25, y: 138.7))
        bezier104Path.addCurve(to: CGPoint(x: 149.98, y: 47.11), controlPoint1: CGPoint(x: 247.51, y: 87.18), controlPoint2: CGPoint(x: 203.47, y: 47.11))
        bezier104Path.addCurve(to: CGPoint(x: 46.09, y: 147.72), controlPoint1: CGPoint(x: 93.41, y: 47.11), controlPoint2: CGPoint(x: 47.39, y: 91.93))
        bezier104Path.addCurve(to: CGPoint(x: 253.25, y: 138.7), controlPoint1: CGPoint(x: 80.84, y: 157.51), controlPoint2: CGPoint(x: 170.73, y: 176.3))
        bezier104Path.close()
        context.saveGState()
        bezier104Path.addClip()
        context.drawLinearGradient(gradient13,
            start: CGPoint(x: 153.98, y: 173.3),
            end: CGPoint(x: 114.07, y: -107.1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 108 Drawing
        let bezier108Path = UIBezierPath()
        bezier108Path.move(to: CGPoint(x: 263.25, y: 163.45))
        bezier108Path.addCurve(to: CGPoint(x: 254.75, y: 199.3), controlPoint1: CGPoint(x: 263.25, y: 163.45), controlPoint2: CGPoint(x: 264.04, y: 182.51))
        bezier108Path.addLine(to: CGPoint(x: 257.17, y: 213.65))
        bezier108Path.addCurve(to: CGPoint(x: 263.25, y: 163.45), controlPoint1: CGPoint(x: 257.17, y: 213.65), controlPoint2: CGPoint(x: 268.12, y: 187.74))
        bezier108Path.close()
        fillColor4.setFill()
        bezier108Path.fill()


        //// Bezier 109 Drawing
        let bezier109Path = UIBezierPath()
        bezier109Path.move(to: CGPoint(x: 251.26, y: 206.91))
        bezier109Path.addCurve(to: CGPoint(x: 253.86, y: 219.85), controlPoint1: CGPoint(x: 251.26, y: 206.91), controlPoint2: CGPoint(x: 254.14, y: 218.19))
        bezier109Path.addCurve(to: CGPoint(x: 202.7, y: 253.4), controlPoint1: CGPoint(x: 253.86, y: 219.85), controlPoint2: CGPoint(x: 233.1, y: 252.97))
        bezier109Path.addCurve(to: CGPoint(x: 251.26, y: 206.91), controlPoint1: CGPoint(x: 202.7, y: 253.4), controlPoint2: CGPoint(x: 232.49, y: 242.76))
        bezier109Path.close()
        fillColor4.setFill()
        bezier109Path.fill()


        //// Bezier 110 Drawing
        let bezier110Path = UIBezierPath()
        bezier110Path.move(to: CGPoint(x: 74.46, y: 64.96))
        bezier110Path.addCurve(to: CGPoint(x: 56.14, y: 80.63), controlPoint1: CGPoint(x: 74.46, y: 64.96), controlPoint2: CGPoint(x: 63.13, y: 70.21))
        bezier110Path.addLine(to: CGPoint(x: 47.07, y: 83.51))
        bezier110Path.addCurve(to: CGPoint(x: 74.46, y: 64.96), controlPoint1: CGPoint(x: 47.07, y: 83.51), controlPoint2: CGPoint(x: 58.87, y: 69.39))
        bezier110Path.close()
        fillColor4.setFill()
        bezier110Path.fill()


        //// Bezier 111 Drawing
        let bezier111Path = UIBezierPath()
        bezier111Path.move(to: CGPoint(x: 52.76, y: 84.95))
        bezier111Path.addCurve(to: CGPoint(x: 44.46, y: 87.3), controlPoint1: CGPoint(x: 52.76, y: 84.95), controlPoint2: CGPoint(x: 45.34, y: 86.64))
        bezier111Path.addCurve(to: CGPoint(x: 38.98, y: 126.92), controlPoint1: CGPoint(x: 44.46, y: 87.3), controlPoint2: CGPoint(x: 34.19, y: 106.56))
        bezier111Path.addCurve(to: CGPoint(x: 52.76, y: 84.95), controlPoint1: CGPoint(x: 38.98, y: 126.92), controlPoint2: CGPoint(x: 37.51, y: 106.59))
        bezier111Path.close()
        fillColor4.setFill()
        bezier111Path.fill()
        
        context.restoreGState()

    }




    @objc(CapStyleStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
