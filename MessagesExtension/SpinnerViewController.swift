//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Developer on 5/29/17.
//  Copyright Â© 2017 JwitApps. All rights reserved.
//

import UIKit
import Messages
import SpriteKit

import Cartography

class SpinnerViewController: MSMessagesAppViewController {
    
    var skView: SKView {
        return view as! SKView
    }
    
    var scene = SpinScene()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        skView.presentScene(scene)
        
        scene.anchorPoint = CGPoint(x: 0.5, y: 0.5)
        
        scene.scaleMode = .resizeFill
        scene.size = skView.frame.size
        
        showColorPicker()
    }
    
    func showColorPicker() {
        let drawer = UIView()
        
        let colors: [UIColor] = [.red, .white, .blue]
        
        let colorViews = colors.map {
            ColorView(color: $0, onTouch: {
                self.scene.backgroundColor = $0
            })
        }
        
        let stackView = UIStackView(arrangedSubviews: colorViews)
        stackView.axis = .horizontal
        stackView.alignment = .center
        stackView.distribution = .equalSpacing
        
        view.addSubview(stackView)
        
        constrain(stackView, view) {
            $0.center == $1.center

            $0.width == $1.width
        }
        
        constrain(colorViews) {
            for i in $0 {
                i.width == i.height
                i.height == 44
            }
        }
    }
   
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

class ColorView: UIView {
    
    var onTouch: (UIColor)->()
    
    init(color: UIColor, onTouch: @escaping (UIColor)->()) {
        self.onTouch = onTouch
        
        super.init(frame: .zero)
        
        backgroundColor = color
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        onTouch(backgroundColor!)
    }
}
